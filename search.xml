<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript HTML DOM 节点列表</title>
    <url>/2020/03/12/JavaScript%20HTML%20DOM%20%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>NodeList对象时一个从文档回去的节点列表(集合)<br>NodeList对象类似HTMLCollection对象<br>一些旧版本浏览器中的方法(如:getElementsByClassName())返回的时NodeList对象，而不是HTMLCollection对象<br>所有浏览器的childNodes属性返回的NodeList对象<br>大部分浏览器的querySelectorAll()返回NodeList对象<br>选取了文档中所有的</p><p>节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myNodeList &#x3D; document.querySelectorAll(&quot;p&quot;);</span><br><span class="line">NodeList中的元素可以通过索引(以0为起始位置)来访问</span><br><span class="line">访问第一个&lt;p&gt;元素代码</span><br><span class="line">y &#x3D; myNodeList[0];</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>NodeList对象length属性</strong><br>NodeList对象length属性定义了节点列表中元素的数量<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;第一个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;第二个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        获取&lt;p&gt;元素的集合</span><br><span class="line">        var myNodelist &#x3D; docuemt.querySelectorAll(&quot;p&quot;);</span><br><span class="line">        显示节点列表的元素个数</span><br><span class="line">        docuemt.getElemtById(&quot;demo&quot;).innerHTML&#x3D;&quot;文档包含&quot;+myNodelist.length+&quot;个段落&quot;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>length属性常用于遍历节点列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;p&gt;第一个p元素&lt;&#x2F;p&gt;</span><br><span class="line">         &lt;p&gt;第二个p元素&lt;&#x2F;p&gt;</span><br><span class="line">         &lt;p&gt;第三个p元素&lt;&#x2F;p&gt;</span><br><span class="line">         &lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         function myFunction()&#123;</span><br><span class="line">             var myNodeList &#x3D; document.querySelectorAll(&quot;p&quot;);</span><br><span class="line">             var i;</span><br><span class="line">             for(i&#x3D;0;i&lt;myNodeList.length;i++)&#123;</span><br><span class="line">                 myNodeList[i].style.color&#x3D;&quot;blue&quot;;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>HTMLCollection与NodeList</strong><br>HTMLCollection时HTML元素的集合<br>NodeList时一个文档节点的集合<br>NodeList与HTMLCollection都与数组对象有点类似,可以使用索引来获取元素<br>NodeList与HTMLCollection都有length属性<br>HTMLCollection元素可以通过name,id或索引来获取<br>NodeList只能通过索引来获取<br>只有NodeList对象有包含属性节点和文本节点</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM 集合(Collection)</title>
    <url>/2020/03/12/JavaScript%20HTML%20DOM%20%E9%9B%86%E5%90%88(Collection)/</url>
    <content><![CDATA[<p><strong>HTML Collection对象</strong><br>getElementsByTagName()方法返回HTML Collection对象<br>HTMLCollection对象类似包含HTML元素的一个数组<br>获取文档中所有的</p><p>元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; document.getElementsByTagName(&quot;p&quot;);</span><br><span class="line">集合中的元素可以通过索引(以0为起始位置)来访问</span><br><span class="line">访问第一个&lt;p&gt;元素的代码</span><br><span class="line">y &#x3D; x[0];</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>HTML Collection对象length属性</strong><br>HTML Collection对象的length属性定义了集合中元素的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;第一个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;第二个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        获取&lt;p&gt;元素的集合</span><br><span class="line">        var myCollection &#x3D; docuemt.getElementsByTagName(&quot;p&quot;);</span><br><span class="line">        显示集合元素个数</span><br><span class="line">        docuemt.getElemtById(&quot;demo&quot;).innerHTML&#x3D;&quot;文档包含&quot;+myCollection.length+&quot;个段落&quot;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>集合length属性常用于遍历集合中的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;第一个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;第二个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;第三个p元素&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFuntion()&#123;</span><br><span class="line">            var myCollection &#x3D; document.getElementsByTagName(&quot;p&quot;);</span><br><span class="line">            var i;</span><br><span class="line">            for(i&#x3D;0;i&lt;myCollection.length;i++)&#123;</span><br><span class="line">                myCollection[i].style.color&#x3D;&quot;blue&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>注意<br>HTMLCollection不是一个数组<br>HTMLCollection看起来可能是一个数组,但其实不是<br>可以像数组一样,使用索引来获取元素<br>HTMLCollection无法使用数组的方法 valueOf()、pop()、或者join()</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM 元素 (节点)</title>
    <url>/2020/03/12/JavaScript%20HTML%20DOM%20%E5%85%83%E7%B4%A0%20(%E8%8A%82%E7%82%B9)/</url>
    <content><![CDATA[<p><strong>创建新的HTML元素(节点)-appendChild()</strong><br>要创建新的HTML元素(节点)需要先创建一个元素，然后再已存在的元素中添加它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p1&quot;&gt;段落1&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p2&quot;&gt;段落2&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            创建一个&lt;p&gt;元素</span><br><span class="line">            var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">            为&lt;p&gt;元素创建一个新的文本节点</span><br><span class="line">            var node &#x3D; document.createTextNode(&quot;新段落&quot;);</span><br><span class="line">            将文本节点添加到&lt;p&gt;元素中</span><br><span class="line">            para.appendChild(node);</span><br><span class="line">            最后,在一个已存在的元素中添加p元素</span><br><span class="line">            查找已存在的元素</span><br><span class="line">            var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">            添加到已存在的元素中</span><br><span class="line">            element.appendChild(para);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>创建新的HTML元素(节点)-insertBefore()</strong><br>appendChild()方法，用于添加新元素到尾部<br>如果需要将新元素添加到开始位置,可以使用insertBefore()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p1&quot;&gt;段落1&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p2&quot;&gt;段落2&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">            var node &#x3D; document.createTextNode(&quot;新段落&quot;);</span><br><span class="line">            para.appendChild(node);</span><br><span class="line">            var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">            var child &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">            element.insertBefore(para,child);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>移除已存在的元素</strong><br>要移除一个元素,需要知道该元素的父元素(删除节点必须知道父节点)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p1&quot;&gt;段落1&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p2&quot;&gt;段落2&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            查找id&#x3D;&quot;div&quot;的元素</span><br><span class="line">            var parent &#x3D; document.createElement(&quot;div&quot;);</span><br><span class="line">            查找id&#x3D;&quot;p1&quot;的&lt;p&gt;元素</span><br><span class="line">            var child &#x3D; document.createElement(&quot;p1&quot;);</span><br><span class="line">            从父元素中移除子节点</span><br><span class="line">            parent.removeChild(child);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>早期的IE浏览器不支持node.remove()方法<br><strong>替换HTML元素-replaceChild()</strong><br>可以使用replaceChild()方法来替换HTML DOM中的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p1&quot;&gt;段落1&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;p2&quot;&gt;段落2&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">            var node &#x3D; document.createTextNode(&quot;新段落&quot;);</span><br><span class="line">            para.appendChild(node);</span><br><span class="line">            var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">            var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">            parent.replaceChild(para,child);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM EventListener</title>
    <url>/2020/03/11/JavaScript%20HTML%20DOM%20EventListener/</url>
    <content><![CDATA[<p><strong>addEventListener()方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,displayDate);</span><br><span class="line">        function displayDate()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Date();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>addEventListener()方法用于向指定元素添加事件句柄<br>addEventListener()方法添加的事件句柄不会覆盖已存在的事件句柄<br>可以向一个元素添加多个事件句柄<br>可以向同个元素添加多个同类型的石距句柄<br>可以向如何DOM对象添加事件监听,不仅仅时HTML元素 如：window<br>addEventListener()方法可以更简单的控制事件(冒泡与捕获)<br>使用addEventListener()方法时,JavaScript从HTML标记中分离开来,可读性更强，在没有控制HTML标记时也可以添加事件监听<br>可以使用removeEventListener()方法来移除事件的监听<br><strong>语法</strong><br>element.addEventListener(event,function,useCapture);<br>第一个参数时事件的类型(如”click”)<br>第二个参数时事件触发后调用的函数<br>第三个参数是个布尔值用于描述事件是冒泡还是捕获<br>不要使用前缀”on”;<br><strong>向原元素添加事件句柄</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">            alert(&quot;点击完成&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>可以使用函数名，来引用外部函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,myFunction);</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            alert(&quot;点击完成&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>向同一个元素中添加多个事件句柄</strong><br>addEventListener()方法允许向同一个元素添加多个事柄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,myFunction);</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,myFunction2);</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            alert(&quot;点击完成&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        function myFunction2()&#123;</span><br><span class="line">            alert(&quot;点击完成2&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>可以向同个元素添加不同类型的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;字体颜色会改变&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,myFunction);</span><br><span class="line">        document.getElementById(&quot;Btn&quot;).addEventListener(&quot;mouseout&quot;,myFunction2);</span><br><span class="line">        var oDemo&#x3D;document.getElementById(&quot;demo&quot;);</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            alert(&quot;点击完成&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        function myFunction2()&#123;</span><br><span class="line">            oDemo.style.color&#x3D;blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>向window对象添加事件句柄</strong><br>addEventListener()方法允许在HTML DOM对象添加事件监听,HTML DOM对象如 HTML元素 HTML文档 Window对象，或者其他支出的事件对象如 ：xmlHttpRequest对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;尝试重置浏览器的窗口大小触发resize事件句柄&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.addEventListener(&quot;resize&quot;,function()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Math.random();</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>传递参数</strong><br>当传递参数值时,使用匿名函数调用带参数的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">         &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;&#x2F;body&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         var p1&#x3D;5;</span><br><span class="line">         var p2&#x3D;7;</span><br><span class="line">             document.getElementById(&quot;Btn&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">                 myFunction(p1,p2);</span><br><span class="line">             &#125;);</span><br><span class="line">             function myFunction(a,b)&#123;</span><br><span class="line">                 document.getElementById(&quot;demo&quot;).innerHTML&#x3D;a*b;</span><br><span class="line">             &#125;</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>事件冒泡或事件捕获</strong><br>事件传递有冒泡和捕获两种方式<br>事件传递定义了元素事件触发的顺序.<br>在冒泡中，内部元素的事件会先被触发,然后再触发外部元素<br>在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件<br>addEventListener()方法可以指定”useCapture”参数来设置传递类型<br>addEventListener(event,function,useCapture);<br>默认值为false，即冒泡传递，当值为true时，事件使用捕获传递</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border: 1px solid;</span><br><span class="line">            padding: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;myDiv&quot;&gt;</span><br><span class="line">            &lt;p id&#x3D;&quot;demo&quot;&gt;冒泡&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;myDiv2&quot;&gt;</span><br><span class="line">            &lt;p id&#x3D;&quot;demo2&quot;&gt;捕获&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">               alert(&quot;点击了P元素&quot;)</span><br><span class="line">            &#125;,false);</span><br><span class="line">            document.getElementById(&quot;myDiv&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">               alert(&quot;点击了Div元素&quot;)</span><br><span class="line">            &#125;,false);</span><br><span class="line">            document.getElementById(&quot;demo2&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">               alert(&quot;点击了demo2元素&quot;)</span><br><span class="line">            &#125;,true);</span><br><span class="line">             document.getElementById(&quot;myDiv2&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">               alert(&quot;点击了Div2元素&quot;)</span><br><span class="line">            &#125;,true);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>removeEventListener()方法</strong><br>removeEventListener()方法移除有addEventListener()方法添加的事件句柄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border: 1px solid;</span><br><span class="line">            padding: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;myDiv&quot;&gt;</span><br><span class="line">            &lt;p&gt;点击按钮移除DIV事件的句柄&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button onclick&#x3D;&quot;removeHandler()&quot; id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">            document.getElementById(&quot;myDiv&quot;).addEventListener(&quot;mousemove&quot;,myFunction);</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Math.random();</span><br><span class="line">            &#125;</span><br><span class="line">            function removeHandler()&#123;</span><br><span class="line">                 document.getElementById(&quot;myDiv&quot;).removeEventListener(&quot;mousemove&quot;,myFunction);</span><br><span class="line">            &#125;   </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>跨浏览器解决方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; document.getElementById(&quot;Btn&quot;);</span><br><span class="line">if(x.addEventListener)&#123;</span><br><span class="line">    x.addEventListener(&quot;click&quot;,myFunction);</span><br><span class="line">&#125;else if(x.attachEvent)&#123;</span><br><span class="line">    x.attachEvent(&quot;onclick&quot;,myFunction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM事件</title>
    <url>/2020/03/10/JavaScript%20HTML%20DOM%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>HTML DOM使JavaScript有能力对HTML事件做出反应<br><strong>对事件做出反应</strong><br>我们可以在事件发生时执行JavaScript,比如当用户在HTML元素上点击时.<br>如需在用户点击某个元素时执行代码，向一个HTML事件属性添加JavaScript代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onclick&#x3D;JavaScript</span><br></pre></td></tr></table></figure>
<p>HTML事件的例子:</p>
<ul>
<li>当用户带年纪鼠标时</li>
<li>当网页已加载时   </li>
<li>当图像已加载时</li>
<li>当鼠标移动到元素时</li>
<li>当输入字段被改变时</li>
<li>当提交HTML表单时</li>
<li>当用户触发按键时<a id="more"></a>
当用户在<p>元素上点击时，会改变其内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">       &lt;p onclick&#x3D;&quot;this.innerHTML&#x3D;&#39;改变文本&#39;&quot;&gt;点击文本!&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
从事件处理器调用一个函数:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function changeText(id)&#123;</span><br><span class="line">            id.innerHTML&#x3D;&quot;改变文本&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p onclick&#x3D;&quot;changeText(this)&quot;&gt;点击文本&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p><strong>HTML事件属性</strong><br>如需向HTML元素分配事件,可以使用事件属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;displayDate函数&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;displayDate()&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        function displayDate()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Date();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>displayDate的函数将在按钮被点击时执行。<br><strong>使用HTML DOM来分配事件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;Btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    document.getElementById(&quot;Btn&quot;).onclick&#x3D;function()&#123;displayDate()&#125;;</span><br><span class="line">    function displayDate()&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Date();</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>displayDate的函数被分配给id=“Btn”的HTML元素<br>按钮点击时JavaScript函数将会被执行<br><strong>onload和onunload事件</strong><br>onload和onunload事件会在用户进入或离开页面时被触发<br>onload事件可用于检测访问者的浏览器类型和浏览器版本,并基于这些信息来加载网页的正确版本<br>onload和onunload事件可用于处理cookie</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body onload&#x3D;&quot;checkCookies()&quot;&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        function checkCookies()&#123;</span><br><span class="line">            if(navigator.cookieEnabled&#x3D;&#x3D;true)&#123;</span><br><span class="line">                alert(&quot;Cookies可用&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                alert(&quot;Cookies不可用&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>onchange事件</strong><br>onchange事件常结合对输入字段的验证来使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         function myFunction()&#123;</span><br><span class="line">            var x &#x3D; document.getElementById(&quot;fname&quot;);</span><br><span class="line">            x.value&#x3D;x.value.toUpperCase();</span><br><span class="line">         &#125;</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         输入字母&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;fname&quot; onchange&#x3D;&quot;myFunction&quot;&gt;</span><br><span class="line">         &lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转化为大写字母&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>onmouseover和onmouseout事件</strong><br>onmouseover和onmouseout事件可用于在用户的鼠标移至HTML元素上分或一处元素时触发函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">   div&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height:100px;</span><br><span class="line">background-color:red;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;div id&#x3D;&quot;demo&quot;onmouseover&#x3D;&quot;Mouse()&quot;onmouseout&#x3D;&quot;Over()&quot;;&gt;MOUSE OVER ME&lt;&#x2F;div&gt;</span><br><span class="line">         &lt;script&gt;</span><br><span class="line">             var oDiv&#x3D;document.getElementById(&quot;demo&quot;);</span><br><span class="line">             function Mouse()&#123;</span><br><span class="line">                oDiv.innerHTML&#x3D;&#39;THANK YOU&#39;;</span><br><span class="line">             &#125;</span><br><span class="line">             function Over()&#123;</span><br><span class="line">                oDiv.innerHTML&#x3D;&#39;MOUSE OVER ME&#39;;</span><br><span class="line">             &#125;</span><br><span class="line">         &lt;&#x2F;script&gt;</span><br><span class="line">     &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>onmousedown、onmouseup以及onclick事件</strong><br>onmousedown、onmouseup以及onclick构成鼠标点击事件的所有部分。首先当点击鼠标按钮时,会触发onmousedown事件,当释放鼠标按钮时，会触发onmouseup事件，最后，当完成鼠标点击时,会触发onclick事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">   div&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height:100px;</span><br><span class="line">background-color:red;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">     &lt;body&gt;</span><br><span class="line">         &lt;div id&#x3D;&quot;demo&quot;onmousedown&#x3D;&quot;Mouse()&quot;onmouseup&#x3D;&quot;Over()&quot;;&gt;onmousedown&lt;&#x2F;div&gt;</span><br><span class="line">         &lt;script&gt;</span><br><span class="line">             var oDiv&#x3D;document.getElementById(&quot;demo&quot;);</span><br><span class="line">             function Mouse()&#123;</span><br><span class="line">                oDiv.innerHTML&#x3D;&#39;onmousedown&#39;;</span><br><span class="line">                oDiv.style.backgroundColor&#x3D;&#39;blue&#39;;</span><br><span class="line">             &#125;</span><br><span class="line">             function Over()&#123;</span><br><span class="line">                oDiv.innerHTML&#x3D;&#39;onmouseup&#39;;</span><br><span class="line">                oDiv.style.backgroundColor&#x3D;&#39;red&#39;;</span><br><span class="line">             &#125;</span><br><span class="line">         &lt;&#x2F;script&gt;</span><br><span class="line">     &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>Html网页中禁止文字选中JavaScript</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    document.body.onselectstart &#x3D; document.body.ondrag &#x3D; function()&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>onfocus<br>当输入字段获取焦点时,改变其背景色</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM改变CSS</title>
    <url>/2020/03/10/JavaScript%20HTML%20DOM%E6%94%B9%E5%8F%98CSS/</url>
    <content><![CDATA[<p><strong>改变HTML样式</strong><br>如需该变HTML元素的样式,语法：<br>document.getElementById(id).style.property=新样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo1&quot;&gt;修改前&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo2&quot;&gt;修改后&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        document.getElementById(&quot;demo2&quot;).style.color&#x3D;&quot;blue&quot;;</span><br><span class="line">        document.getElementById(&quot;demo2&quot;).style.fontFamily&#x3D;&quot;Arial&quot;;</span><br><span class="line">        document.getElementById(&quot;demo2&quot;).style.fontSize&#x3D;&quot;larger&quot;;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>使用事件</strong><br>HTML DOM允许我们通过触发事件来执行代码<br>该变id=“demo”的HTML元素的样式，当用户点击按钮时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;html&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;p id&#x3D;&quot;demo&quot;&gt;文字&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button onclick&#x3D;&quot;document.getElementById(&#39;demo&#39;).style.color&#x3D;&#39;red&#39;&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript HTML DOM改变</title>
    <url>/2020/03/10/JavaScript%20HTML%20DOM%20%20/</url>
    <content><![CDATA[<p>HTML DOM允许Javascript改变HTML元素的内容<br><strong>改变HTML输出流</strong><br>JavaScript能够创建动态的HTML内容:输出日期<br>在JavaScript中,document.write()可用于直接向HTML输出流写内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            document.write(Date());</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>不要在文档(DOM)加载完成之后使用document.write()。这会覆盖该文档<br><strong>改变HTML内容</strong><br>修改HTML内容的最简单的方法是使用innerHTML属性<br>如需改变HTML元素的内容,语法<br>document.getElementById(id).innerHTML=新的HTML</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;新文本&quot;;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>改变HTML属性</strong><br>如需改变HTML元素的属性，语法:<br>document.getElementById(id).attribute=新的属性值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;img id&#x3D;&quot;image&quot; src&#x3D;&quot;smiley.gif&quot;&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            document.getElementById(&quot;image&quot;).src&#x3D;&quot;new.gif&quot;;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript闭包</title>
    <url>/2020/03/09/JavaScript%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>JavaScript变量开头是局部变量或全局变量<br>四月变量可用用到闭包<br><strong>全局变量</strong><br>函数可以访问有函数内部定义的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;P id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                var a &#x3D; 4;</span><br><span class="line">                return a * a;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getELementById(&quot;demo&quot;).innerHTML &#x3D; myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>函数也可以访问函数外部定义的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;P id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var a &#x3D; 4;</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                return a * a;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getELementById(&quot;demo&quot;).innerHTML &#x3D; myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>第二个例子中,a是一个全局变量<br>在web页面中全局变量属于window对象<br>全局变量可应用于页面上的所有脚本<br>在第一个例子中,a是一个局部变量<br>局部变量只能用于定义它函数内部,对于其他的函数或脚本代码是不可用的<br>全局和局部变量即使名称相同，它们也是两个不同的变量。修改其中的一个，不会邮箱另一个的值<br>变量声明时如果不使用var关键字，你们它就是一个全局变量，即使它在函数内定义<br><strong>变量的生命周期</strong><br>全局变量的作用域是全局性的,即在整个JavaScript程序中，全局变量处处都在<br>而在函数内部声明的变量，只在函数内部起作用。这些变量时局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用<br><strong>计数器困境</strong><br>如果想统计一些数值，且该计数器在所有函数中都是可用的<br>可用使用全局变量，函数设置计数器递增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;myFuntion()&quot;&gt;计数器&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id &#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var counter &#x3D; 0;</span><br><span class="line">            function add()&#123;</span><br><span class="line">                return counter +&#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">            function myFuntion()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D; add();</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>计数器数值在执行add()函数时发生变化<br>页面上的任何脚本都能改变计数器，即使没有调用add()函数<br>如果在函数内声明计数器，如果没有调用函数将无法修改计数器的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;myFuntion()&quot;&gt;</span><br><span class="line">        &lt;p id &#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function add()&#123;</span><br><span class="line">                var counter &#x3D; 0;</span><br><span class="line">                return conunter +&#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">            function myFuntion()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D; add();</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>代码将无法正确输出,每次调用add()函数时，计数器都会设置为1<br><strong>JavaScript内嵌函数</strong><br>使用函数都能访问全局变量<br>实际上,在JavaScript中，所有函数都能访问它们上一层的作用域’<br>JavaScript支持嵌套函数，嵌套函数可用访问上一次的函数变量<br>例子中，嵌套函数plus()可以访问父函数的counter变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;p id &#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function add()&#123;</span><br><span class="line">                var counter &#x3D; 0;</span><br><span class="line">                function plus()&#123;conunter +&#x3D; 1;&#125;</span><br><span class="line">                plus();</span><br><span class="line">                return counter;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D; add();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>肉桂能在外部访问plus()函数，这样就能解决计数器的困境<br>我们同样需要确保counter = 0值执行一次<br><strong>JavaScript闭包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;myFuntion()&quot;&gt;计数器&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id &#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var  add &#x3D; (function()&#123;</span><br><span class="line">                 var counter &#x3D; 0;</span><br><span class="line">                 return function ()&#123;</span><br><span class="line">                     return counter +&#x3D; 1;</span><br><span class="line">                 &#125;      </span><br><span class="line">            &#125;)();</span><br><span class="line">            function myFuntion()&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D; add();</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>变量add指定了函数自我调用的返回字值<br>自我调用函数只执行一次，设置计数器为0，并返回函数表达式<br>add变量可以作为一个函数使用，它可以访问函数上一层作用域的计数器<br>这就是JavaScript闭包，它使得函数拥有私有变量变成可能<br>计数器受匿名函数的作用域保护，只能通过add方法修改<br>闭包时一种保护四月变量的机制，在函数执行形成四月的作用域，保护里面的四月变量不受外界干扰，直观的说就是形成一个不销毁的栈环境</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript函数调用</title>
    <url>/2020/03/08/JavaScript%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>JavaScript函数有4种调用方法<br>每种方式的不同在于this的初始化<br><strong>this关键字</strong><br>一般而言,在JavaScript中，this指向函数执行时的当前对象<br>注意 this<br><strong>调用JavaScript函数</strong><br>函数中的代码在函数被调用后执行</p>
<a id="more"></a>
<p><strong>作为有个函数调用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myFunction(10,2);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>以上函数不属于任何对象,但是在JavaScript中它始终是默认的全局对象<br>在HTML中默认的全局对象是HTML页面本身，所以函数属于HTML页面<br>在浏览器中的页面对象是浏览器窗口(window对象)，以上函数会自动变为window对象的函数<br>myFunction()和window.myFunction()是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;window.myFunction(10,2);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>这是调用JavaScript函数常用的方法，但不是良好的编程习惯<br>全局变量,方法或函数容易造成命名冲突的bug<br><strong>全局对象</strong><br>当函数没有被自身的对象调用时this的值就会变成全局对象<br>在web浏览器中全局对象时浏览器窗口(window对象)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myFunction();</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>函数作为全局对象调用，会使this的值成为全局对象<br>使用window对象作为一个变量容易造成程序崩溃<br><strong>函数作为方法调用</strong><br>在JavaScript中你可以将函数定义为对象的方法<br>创建有个对象(myObject)，对象有两个属性(firstName和lastName)，及一个方法(fullName)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var myObject &#x3D; &#123;</span><br><span class="line">            firstName : &quot;JOhn&quot;,</span><br><span class="line">            lastName : &quot;Doe&quot;,</span><br><span class="line">            fullName : function () &#123;</span><br><span class="line">                return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myObject.fullName();</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>fullName方法是一个函数,函数属于对象，myObject是函数的所有者<br>this对象，拥有JavaScript代码。例子中this的值为myObject对象<br>修改fullName方法并返回this值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">         var myObject &#x3D; &#123;</span><br><span class="line">            firstName : &quot;JOhn&quot;,</span><br><span class="line">            lastName : &quot;Doe&quot;,</span><br><span class="line">            fullName : function () &#123;</span><br><span class="line">                return this;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myObject.fullName();</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>函数作为对象方法调用,会使得this得值成为对象本身<br><strong>使用构造函数调用函数</strong><br>如果函数调用前使用了new关键字，则是调用了构造函数<br>这看起来就像创建了新的函数，但实际上JavaScript函数是重新创建得对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(arg1,arg2)&#123;</span><br><span class="line">            this.firstName&#x3D;arg1;</span><br><span class="line">            this.lastName&#x3D;arg2;</span><br><span class="line">        &#125;</span><br><span class="line">        var x &#x3D;new myFunction (&quot;John&quot;,&quot;Doe&quot;);</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x.firstName;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>构造函数得调用会创建一个新的对象，新对象会继承构造函数得属性和方法<br>构造函数中得this关键字没有任何的值<br>this的值在函数调用实例化对象(new object)时创建<br><strong>作为函数方法调用函数</strong><br>在JavaScript中,函数时对象。JavaScript函数有它的属性和方法<br>call()和apply()是预定义的函数方法。两个方法可用于调用函数，两个方法的第一个参数必须是对象本身</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;</span><br><span class="line">        var myObject &#x3D; myFunction.call(myObject,10,2);</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myObject;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;</span><br><span class="line">        var myArray &#x3D; [10,2];</span><br><span class="line">        var myObject &#x3D; myFunction.apply(myObject,myArray);</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myObject;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>两个方法都使用了对象本身作为第一个参数。两者的区别在于第二个参数:apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入(从第二个参数开始)<br>在JavaScript严格模式下，在调用函数时第一个参数会成为this的值,即使该参数不是一个对象<br>在JavaScript非严格模式下,如果第一个参数的值是null或undefined,它将使用全局对象代替<br>通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript函数参数</title>
    <url>/2020/03/08/JavaScript%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>JavaScript函数对参数的值没有任何的检查<br><strong>函数显式参数(Parameters)与隐式参数(Arguments)</strong><br>函数的显式参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">functionName(parameter1,parameter2,parameter3)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>函数显式参数在函数定义时列出<br>函数隐式参数在函数调用时传递给函数真正的值<br><strong>参数规则</strong><br>JavaScript函数定义现世参数时没有指定数据类型<br>JavaScript函数对隐式参数没有进行类型检测<br>JavaScript函数对隐式参数的个数没有进行检测<br><strong>默认参数</strong><br>ES5中如果函数在调用时未提供隐式参数,参数会默认设置为:undefined<br>有时候这是可接受的,但是建议最好为参数设置一个默认值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction(x,y)&#123;</span><br><span class="line">                if(y &#x3D;&#x3D;&#x3D; undefined)&#123;</span><br><span class="line">                    y &#x3D; 0;</span><br><span class="line">                &#125;</span><br><span class="line">                return x * y;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(5);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>更简单的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction(x,y)&#123;</span><br><span class="line">                    y &#x3D; y || 0;</span><br><span class="line">                return x * y;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(5);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>如果y已经定义,y||返回y,因为y是true，否则返回0,因为undefined为false<br>如果函数调用时设置了过多的参数,参数将无法被引用,因为无法找到对于的参数名。只能使用argumens对象来调用<br><strong>ES6函数可以自带函数</strong><br>ES6支持函数带有默认参数，就判断undefined和||的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction(x,y&#x3D;10)&#123;</span><br><span class="line">                return x * y;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(5);</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(0,2);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>arguments对象</strong><br>JavaScript函数有个内置的对象argument对象<br>argument对象包含了函数调用的参数数组<br>通过这种方式你可以很方便的找到最大的一个参数的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            x &#x3D; findeMax(1,233,44,559,978,55);</span><br><span class="line">            function findMax()&#123;</span><br><span class="line">                var i, max &#x3D; arguments[0];</span><br><span class="line">            if(arguments.length&lt;2)return max;</span><br><span class="line">            for(i &#x3D; 0;i &lt; arguments.length; i++)&#123;</span><br><span class="line">                if(arguments[i] &gt; max)&#123;</span><br><span class="line">                    max &#x3D; arguments[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return max;</span><br><span class="line">        &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>或者创建有个函数用来统计所有数值的和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            x &#x3D; sumAll(1,233,44,559,978,55);</span><br><span class="line">            function sumAll()&#123;</span><br><span class="line">                var i, sum &#x3D; 0;</span><br><span class="line">            for(i &#x3D; 0;i &lt; arguments.length; i++)&#123;</span><br><span class="line">                if(arguments[i] &gt; max)&#123;</span><br><span class="line">                    sum +&#x3D; arguments[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return sum;</span><br><span class="line">        &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>通过值传递参数</strong><br>在函数中调用的参数时函数的隐式参数<br>JavaScript隐式参数通过值来传递:函数仅仅只是获取值<br>如果函数修改参数的值，不会修改显式参数的初始值<br>隐式参数的改变在函数外是不可见的<br><strong>通过对象传递参数</strong><br>在JavaScript中，可以引用对象的值<br>因此在函数内部修改对象的属性就会修改其初始的值<br>修改对象属性可作用于函数外部<br>修改对象属性在函数外是可见的</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript函数定义</title>
    <url>/2020/03/07/JavaScript%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<p>JavaScript使用关键字function定义函数<br>函数可以通过声明定义,也可以时一个表达式<br><strong>函数声明</strong><br>函数语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function functionName(parameters)&#123;</span><br><span class="line">    执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数声明后不会立即执行,会在我们需要的时候调用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction(a,b)&#123;</span><br><span class="line">                return a*b;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myFunction(3,4);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>分号是用来分隔可执行的JavaScript语句<br>由于函数声明不是一个可执行语句，所以不以分号结束<br><strong>函数表达式</strong><br>JavaScript函数可以通过一个表达式定义<br>函数表达式可以存储在变量中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var x&#x3D;function(a,b)&#123;return a*b&#125;;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>在函数表达式存储在变量后,变量也可作为一个函数使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var x &#x3D; function(a, b) &#123;return a * b&#125;;</span><br><span class="line">    var z &#x3D; x(4,3);</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML&#x3D;z;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>以上函数实际是一个匿名函数(函数没有名称)<br>函数存储在变量中，不需要函数名称，通常通过变量名来调用<br>以上函数以分号结尾，因为它是一个执行语句<br><strong>Function()构造函数</strong><br>函数通过关键字function定义<br>函数同样可以通过内置的JavaScript函数构造器(Function())定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var myFunction &#x3D; new Function(&quot;a&quot;,&quot;b&quot;,&quot;return a* b&quot;);</span><br><span class="line">        var x &#x3D; myFunction(4,3);</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>不用构造函数可以写成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var myFunction &#x3D; function (a,b) &#123;return a * b&#125;;</span><br><span class="line">    var x &#x3D; myFunction(4,3);</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHMTL &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>在JavaScript中，很多时候，需要避免使用new关键字<br><strong>函数提升(Hoisting)</strong><br>提升是JavaScript默认将当前作用域提升到前面去的行为<br>提升应用在变量的声明与函数的声明<br>因此,函数可以在声明之前调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myFunction(5);</span><br><span class="line">function myFunction(y)&#123;</span><br><span class="line">    return y * y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用表达式定义函数时无法提升<br><strong>自调用函数</strong><br>函数表达式可以”自调用”<br>自调用表达式会自动调用<br>如果表达式后面紧跟(),则会自动调用<br>不能自调用声明的函数<br>通过添加括号，来说明它是一个函数表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;自调用&quot;;</span><br><span class="line">    &#125;)();</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>以上函数是一个匿名自我调用的函数<br><strong>函数可作为一个值使用</strong><br>JavaScript函数作为一个值使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;;</span><br><span class="line">        var x &#x3D; myFunction(4,3);</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>JavaScript函数可作为表达式使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;;</span><br><span class="line">        var x &#x3D; myFunction(4,3) * 2;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>函数是对象</strong><br>在JavaScript中使用typeof操作符判断函数类型将返回”function”<br>但是JavaScript函数描述为一个对象更加准确<br>JavaScript函数有属性和方法<br>argument.length属性返回函数调用过程接收到的参数个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return arguments.length;</span><br><span class="line">        &#125;;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(4,3);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>toString()方法将函数作为一个字符串返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction(a,b)&#123;</span><br><span class="line">            return a * b;</span><br><span class="line">        &#125;;</span><br><span class="line">        var x &#x3D; myFunction.toString();</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>函数定义作为对象的属性,称为对象方法<br>函数如果用于创建新的对象，称为对象的构造函数<br><strong>箭头函数</strong><br>ES6新增了箭头函数<br>箭头函数表达式的语法比普通函数表达式 更简洁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（参数1,参数2,...,参数n）&#x3D;&gt;&#123;函数声明&#125;</span><br><span class="line">（参数1,参数2,...,参数n）&#x3D;&gt;表达式(单一)</span><br><span class="line">相当于:（参数1,参数2,...,参数n）&#x3D;&gt;&#123;return 表达式;&#125;</span><br></pre></td></tr></table></figure>
<p>当只有一个参数时,圆括号时可选的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(单一参数)&#x3D;&gt;&#123;函数声明&#125;</span><br><span class="line"> 单一参数&#x3D;&gt;&#123;函数声明&#125;</span><br></pre></td></tr></table></figure>
<p>没有参数的函数应该写成一对圆括号<br>() = &gt;{函数声明}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;ES5</span><br><span class="line">        var x &#x3D; function(x,y)&#123;</span><br><span class="line">            return x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#x2F;&#x2F;ES6</span><br><span class="line">    const x&#x3D;(x,y)&#x3D;&gt;x*y;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>有的箭头函数都没有自己的this，不适合顶一个对象的方法<br>当我们使用箭头函数的时候,箭头函数会默认帮我们绑定外层this的值,所以在箭头函数中this的值和外层的this时一样的<br>箭头函数不能提升的，所以在使用前需要定义<br>使用const比使用var更安全，因为函数表达式始终是一个常量<br>如果函数部分只是一个语句，则可以省略return关键字和大括号{},这样做是一个比较好的习惯</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const x &#x3D; (x,y) &#x3D;&gt; &#123;return x * y&#125;;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x(5,5);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>注意：IE11 及更早 IE 版本不支持箭头函数。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript void含义</title>
    <url>/2020/03/07/JavaScript%20void/</url>
    <content><![CDATA[<p>JavaScript:void(0)中最关键的是void关键字,void是JavaScript中非常重要的关键字,该操作符指定要计算一个表达式，但是不返回值<br>语法格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            void func()</span><br><span class="line">            javascript:void func()</span><br><span class="line">            或者</span><br><span class="line">            void(func())</span><br><span class="line">            javascript:void(func())</span><br><span class="line">        &#x2F;&#x2F;--&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>创建一个超级连接,当用户点击以后不会发生任何事</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;javascript:void(0)&quot;&gt;点击了什么也不会发生&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>当用户连接时，void(0)计算为0，但JavaScript上没有任何效果<br>在用户点击链接后显示警告信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">            &#x2F;&#x2F;--&gt;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;javascript:void(alert(&quot;Warning!!!&quot;))&quot;&gt;点击&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>参数a将返回undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">            function getValue()&#123;</span><br><span class="line">                var a,b,c;</span><br><span class="line">                a&#x3D;void(b&#x3D;5,c&#x3D;7);</span><br><span class="line">                document.write(&#39;a&#x3D;&#39;+a+&#39;b&#x3D;&#39;+b+&#39;c&#x3D;&#39;+c);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;--&gt;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点击&quot; onclick&#x3D;&quot;getValue();&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt; </span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>href=”#”与href=”javascript:void(0)”的区别</strong><br>#包含了一个位置信息，默认的锚时#top也就是网页的上端<br>而JavaScript:void(0),仅仅表示一个死链接<br>在页面很长的时候会使用#来定位页面的具体位置，格式为: #+id<br>如果要定义一个死链接使用JavaScript:void(0)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;javascript:void(0)&quot;&gt;点击后没有反应&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#pos&quot;&gt;点击后到指定位置&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;pos&quot;&gt;尾部定位点&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript JSON</title>
    <url>/2020/03/07/JavaScript.%20JSONmd/</url>
    <content><![CDATA[<p>JSON是用于存储和传输数据的格式<br>JSON通常用于服务端向网页传递数据<br><strong>JSON</strong></p>
<ul>
<li>JSON英文全称 JavaScript Obejct Notation</li>
<li>JSON是一种轻量级的数据交换格式</li>
<li>JSON是独立的语言</li>
<li>JSON易于理解</li>
</ul>
<p><em>JSON使用JavaScript语法，但是JSON格式仅仅是一个文本<br>文本可以被任何编程语言读取及作为数据根式传递<br>*</em>JSON**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;sites&quot;:[</span><br><span class="line">    &#123;&quot;naem&quot;:&quot;baidu&quot;,&quot;url&quot;:&quot;www.baidu.com&quot;&#125;,</span><br><span class="line">    &#123;&quot;name&quot;:&quot;Google&quot;,&quot;url&quot;:&quot;www.google.com&quot;&#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>JSON格式化后为JavaScript对象</strong><br>JSON格式再语法上与创建JavaScript对象代码是相同的<br>由于它们很相似，所以JavaScript程序可以很容易将JSON数据转换为JavaScript对象<br><strong>JSON语法规则</strong></p>
<ul>
<li>数据为键/值 对</li>
<li>数据又逗号分隔</li>
<li>大括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON数据-一个名称对应一个值</strong><br>JSOn数据格式为键/值 对，就像JavaScript对象属性<br>键/值 对包括字段名称（在双括号中），后面一个冒号，然后是值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;name&quot;:&quot;BaiDu&quot;</span><br></pre></td></tr></table></figure>
<p><strong>JSON对象</strong><br>JSON对象保存在大括号内<br>就像在JavaScript中,对象可以保存多个键/值 对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;BaiDu&quot;,&quot;url&quot;:&quot;www.baidu.com&quot;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>JSON数组</strong><br>JSON数组保存在中括号内<br>就像在JavaScript中，数组可以包含对象<br>“sites”:[<br>     {“naem”:”baidu”,”url”:”<a href="http://www.baidu.com&quot;}" target="_blank" rel="noopener">www.baidu.com&quot;}</a>,<br>     {“name”:”Google”,”url”:”<a href="http://www.google.com&quot;}" target="_blank" rel="noopener">www.google.com&quot;}</a><br>]<br>对象”sites”是一个数组，包含了三个对象<br>每个对象为站点的信息(网站名个网站地址)<br><strong>JSON字符串转换为Javascript对象</strong><br>通常我们从服务器中读取JSON数据，并在网页中显示数据<br>简单起见，我们网页中直接设置JSON字符串<br>首先创建Javascript字符串，字符串为JSON格式的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var text&#x3D;&#39;&#123; &quot;sites&quot;:[&#39;+</span><br><span class="line">        &#39;&#123;&quot;naem&quot;:&quot;baidu&quot;,&quot;url&quot;:&quot;www.baidu.com&quot;&#125;,&#39;+</span><br><span class="line">        &#39;&#123;&quot;name&quot;:&quot;Google&quot;,&quot;url&quot;:&quot;www.google.com&quot;&#125;&#39;</span><br><span class="line">]&#125;&#39;;</span><br></pre></td></tr></table></figure>
<p>然后,使用JavaScript内置函数JSON.parse()将字符串转换为JavaScript对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj&#x3D;JSON.paese(text);</span><br></pre></td></tr></table></figure>
<p>最后，在页面中使用新的JavaScript对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var text&#x3D;&#39;&#123;&quot;sites&quot;: [&#39;+</span><br><span class="line">                        &#39;&#123;&quot;naem&quot;:&quot;baidu&quot;,&quot;url&quot;:&quot;www.baidu.com&quot;&#125;,&#39;+</span><br><span class="line">                        &#39;&#123;&quot;name&quot;:&quot;Google&quot;,&quot;url&quot;:&quot;www.google.com&quot;&#125; ]&#125;&#39;;</span><br><span class="line">            obj&#x3D;JSON.parse(text);</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;obj.sites[1].name+&quot; &quot;+obj.sites[1].url;   </span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>相关函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.parse()        用于将一个JSON字符串转换为Javascript对象</span><br><span class="line">JSON.stringify()    用于将Javascript值转换为JSON字符串</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript let 和 const</title>
    <url>/2020/03/06/JavaScript%20let%E5%92%8Cconst/</url>
    <content><![CDATA[<p>ES2015(ES6)新增加了两个重要的JavaScript关键字:let和const<br>let声明的变量只在let命令所在的代码块内有效<br>const声明一个只读的常量，一旦声明，常量的值就不能改变<br>在ES6之前，JavaScript只有两种作用域:全局变量和函数内局部变量<br><strong>全局变量</strong><br>在函数外声明的变量作用域是全局的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">                这里可以使用carName变量</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                这里也可以使用carName变量</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>全局变量在JavaScript程序的如何地方都可以访问。<br><strong>局部变量</strong><br>在函数内声明的变量作用域是局部的(函数内)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        这里不能使用carName变量</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            var carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">            这里可以使用carName变量</span><br><span class="line">        &#125;</span><br><span class="line">        这里不能使用carName变量</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>函数内使用var声明的变量只能在函数内容访问,如果不使用var则是在全局变量<br><strong>JavaScript块级作用域</strong><br>使用var关键字声明的变量不具备块级作用域的特性，它在{}外依然能被访问到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var x&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">这里可以使用x变量</span><br></pre></td></tr></table></figure>
<p>在ES6之前,是没有块级作用域的概念的<br>ES6可以使用let关键字来实现块级作用域<br>let声明的变量只在let命令所在的代码块{}内有效，在{}之外不能访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    let x&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">这里不能使用x变量</span><br></pre></td></tr></table></figure>
<p><strong>重新定义变量</strong><br>使用var关键字重新声明变量可能会带来问题<br>在块中重新声明变量也会重新声明块外的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var x&#x3D;10;</span><br><span class="line">        这里输出x为10</span><br><span class="line">        &#123;</span><br><span class="line">            var x&#x3D;2;</span><br><span class="line">            这里输出x为2</span><br><span class="line">        &#125;</span><br><span class="line">        这里输出x为2</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>let关键字就可以解决这个问题，因为它只在let命令所在的代码块{}内有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;10;</span><br><span class="line">            这里输出x为10</span><br><span class="line">            &#123;</span><br><span class="line">                let x&#x3D;2;</span><br><span class="line">                这里输出x为2</span><br><span class="line">            &#125;</span><br><span class="line">            这里输出x为10</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;   </span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>循环作用域</strong><br>使用var关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var i&#x3D;5;</span><br><span class="line">            for(var i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">                一些代码...</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;i;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>使用let关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            let i&#x3D;5;</span><br><span class="line">            for(let i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">                一些代码...</span><br><span class="line">            &#125;</span><br><span class="line">            这里输出i为5</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;i;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>使用了var关键字，它声明的变量是全局的，包括循环体内与循环体内<br>使用了let关键字，它声明的变量作用域只在循环体内，循环体外的变量不受影响<br><strong>局部变量</strong><br>在函数体内使用var和let关键字声明的变量有点类似。<br>它们的作用域都是局部的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    使用var</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">    var carName&#x3D;&quot;Volvo&quot;;    局部作用域</span><br><span class="line">&#125;</span><br><span class="line">    使用let</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">    let carName&#x3D;&quot;Volvo&quot;;    局部作用域</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>全部变量</strong><br>在函数体外或代码块外使用var和let关键字声明的变量也有点类似<br>它们的作用域都有全局的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    使用var</span><br><span class="line">var x&#x3D;2;    全局作用域</span><br><span class="line">    使用let</span><br><span class="line">let x&#x3D;2;    全局作用域</span><br></pre></td></tr></table></figure>
<p><strong>HTML代码中使用全局变量</strong><br>在JavaScript中，全局作用域是针对JavaScript环境<br>在HTML中，全局作用域是针对window对象<br>使用var关键字声明的全局作用域变量属于window对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">        &#x2F;&#x2F;可以使用window.carName访问变量</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;I can display&quot;+window.carName;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>使用let关键字声明的全局作用域变量不属于window对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            let carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">            &#x2F;&#x2F;不能使用window.carName访问变量</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;I can not display&quot;+window.carName;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>重置变量</strong><br>使用var关键字声明的变量在任何地方都可以修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;2;</span><br><span class="line">            var x&#x3D;3;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>在相同的作用域或块级作用域中，不能使用let关键字来重置var关键字声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;2;    合法</span><br><span class="line">let x&#x3D;3;    不合法</span><br><span class="line">&#123;</span><br><span class="line">    var x&#x3D;4;    合法</span><br><span class="line">    let x&#x3D;5;    不合法    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在相同的作用域或块级作用域中,不能使用let关键字来重置let关键字声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x&#x3D;2;    合法</span><br><span class="line">let x&#x3D;3;    不合法</span><br><span class="line">&#123;</span><br><span class="line">    let x&#x3D;4;    合法</span><br><span class="line">    let x&#x3D;5;    不合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在相同的作用域或块级作用域中，不能使用var关键字来重置let关键字声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x&#x3D;2;    合法</span><br><span class="line">var x&#x3D;3;    不合法</span><br><span class="line">&#123;</span><br><span class="line">    let x&#x3D;4;    合法</span><br><span class="line">    var x&#x3D;5;    不合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>let关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x&#x3D;2;    合法</span><br><span class="line">&#123;</span><br><span class="line">    let x&#x3D;3;    合法</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    let x&#x3D;4;    合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>变量提升</strong><br>JavaScript中，var关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;carName;</span><br><span class="line">            var carName;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>let 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明后使用<br><strong>const关键字</strong><br>const用于声明一个或多个常量,声明时必须进行初始化且初始化后值不可再修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        try&#123;</span><br><span class="line">            const PI&#x3D;3.1415926;</span><br><span class="line">                  PI&#x3D;3.14;  &#x2F;&#x2F;报错</span><br><span class="line">                  PI&#x3D;PI+10; &#x2F;&#x2F;报错</span><br><span class="line">        &#125;catch(err)&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;err;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>const定义常量与使用let定义的变量相似</p>
<ul>
<li>二者都是块级作用域</li>
<li>都不能和它所在作用域内的其他变量或函数拥有相同的名称<br>两点区别</li>
<li>const声明的常量必须初始化，而let声明的变量不用</li>
<li>const定义常量的值不能通过再赋值修改，也不能再次声明。而let定义的变量值可以修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10;</span><br><span class="line">这里输出x为10</span><br><span class="line">&#123;</span><br><span class="line">    const x&#x3D;2;</span><br><span class="line">    这里输出x为2</span><br><span class="line">&#125;</span><br><span class="line">这里输出x为10</span><br></pre></td></tr></table></figure>
const声明的常量必须初始化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">错误写法</span><br><span class="line">const PI;</span><br><span class="line">PI&#x3D;3.14;</span><br><span class="line">正确写法</span><br><span class="line">const PI&#x3D;3.14;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>并非真正的常量</strong><br>const的本质:const定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用const定义的对象或者数组，其实是可变的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            &#x2F;&#x2F;创建常量对象</span><br><span class="line">            const car&#x3D;&#123;type:&quot;Fiat&quot;,model:&quot;500&quot;,color:&quot;white&quot;&#125;;</span><br><span class="line">            &#x2F;&#x2F;修改属性：</span><br><span class="line">            car.color&#x3D;&quot;red&quot;;</span><br><span class="line">            &#x2F;&#x2F;添加属性</span><br><span class="line">            car.owner&#x3D;&quot;Johnson&quot;;</span><br><span class="line">            &#x2F;&#x2F;显示属性</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;car owner is&quot;+car.owner;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>但是我们不能对常量对象重新赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        try&#123;</span><br><span class="line">            const car&#x3D;&#123;type:&quot;Fiat&quot;,model:&quot;500&quot;,color:&quot;white&quot;&#125;;</span><br><span class="line">            car&#x3D;&#123;type:&quot;Volvo&quot;,model:&quot;ex60&quot;,color:&quot;blue&quot;&#125;;</span><br><span class="line">            &#125;catch(err)&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;err;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>修改常量数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            &#x2F;&#x2F;创建常量数组</span><br><span class="line">            const cars&#x3D;[&quot;saab&quot;,&quot;volvo&quot;,&quot;bmw&quot;];</span><br><span class="line">            &#x2F;&#x2F;修改元素</span><br><span class="line">            cars[0]&#x3D;&quot;toyota&quot;;</span><br><span class="line">            &#x2F;&#x2F;添加元素</span><br><span class="line">            cars.push(&quot;audi&quot;);</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;cars.push;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>但是我们不能对常量数组重新赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        try&#123;</span><br><span class="line">            const cars&#x3D;[&quot;saab&quot;,&quot;volvo&quot;,&quot;bmw&quot;];</span><br><span class="line">            cars&#x3D;[&quot;toyota&quot;,&quot;volvo&quot;,&quot;audi&quot;]</span><br><span class="line">        &#125;catch(err)&#123;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;err;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>重置变量</strong><br>使用var关键字声明的变量在如何地方都可以修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;2;    合法</span><br><span class="line">var x&#x3D;3;    合法</span><br><span class="line">x&#x3D;4;        合法</span><br></pre></td></tr></table></figure>
<p>在相同的作用域或块级作用域中，不能使用const关键字来重置var和let关键字声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;2;    合法</span><br><span class="line">const x&#x3D;2;  不合法</span><br><span class="line">&#123;</span><br><span class="line">    let x&#x3D;2;    合法</span><br><span class="line">    const x&#x3D;2;  不合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在相同的作用域或块级作用域中，不能使用const关键字来重置const关键声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const x&#x3D;2;  合法</span><br><span class="line">const x&#x3D;3;  不合法</span><br><span class="line">x&#x3D;3;    不合法</span><br><span class="line">var x&#x3D;3;    不合法</span><br><span class="line">let x&#x3D;3;    不合法</span><br><span class="line">&#123;</span><br><span class="line">    const x&#x3D;2;  合法</span><br><span class="line">    const x&#x3D;3;  不合法</span><br><span class="line">    x&#x3D;3;    不合法</span><br><span class="line">    var x&#x3D;3;    不合法</span><br><span class="line">    let x&#x3D;3;    不合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>const关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const x&#x3D;2;  合法</span><br><span class="line">&#123;</span><br><span class="line">    const x&#x3D;3;  合法</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    const x&#x3D;4;  合法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>变量提升</strong><br>JavaScript var关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明(JavaScript变量提升)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            carName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;carName;</span><br><span class="line">            var carName;</span><br><span class="line">        &lt;&#x2F;script&gt;   </span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>const 关键字定义的变量则不可以再使用后声明,也就是变量需要先声明再使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">varName&#x3D;&quot;Volvo&quot;;</span><br><span class="line">const carName&#x3D;&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript this关键字</title>
    <url>/2020/03/05/Javascript%20this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>面向对象语言中this表示当前对象的一个引用<br>但在JavaScript中this表示固定不变的，它会随着执行环境的改变而改变。</p>
<ul>
<li>在方法中，this表示该方法所属的对象</li>
<li>如果单独使用，this表示全局对象</li>
<li>在函数中，this表示全局对象</li>
<li>在函数中，在严格模式下，this是未定义的(undefined)。</li>
<li>在事件中，this表示接收事件的元素</li>
<li>类似call()和apply()方法可以将this引用到任何对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var person&#x3D;&#123;</span><br><span class="line">            firstName:&#39;John&#39;,</span><br><span class="line">            lastName:&#39;Doe&#39;,</span><br><span class="line">            id:&#39;5566&#39;,</span><br><span class="line">        fullName:function()&#123;</span><br><span class="line">            return this.firstName+&quot;&quot;+this. lastName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">	document.getElementById(&quot;demo&quot;).innerHTML&#x3D;person.fullName();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>方法中的this</strong><br>在对象方法中，this指向调用它所在的对象<br>上面的例子，this表示person对象<br>fullName方法所属的对象就是person</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var person&#x3D;&#123;</span><br><span class="line">            firstName:&#39;John&#39;,</span><br><span class="line">            lastName:&#39;Doe&#39;,</span><br><span class="line">            id:&#39;5566&#39;,</span><br><span class="line">        fullName:function()&#123;</span><br><span class="line">            return this.firstName+&quot;&quot;+this. lastName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">	document.getElementById(&quot;demo&quot;).innerHTML&#x3D;person.fullName();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>单独使用this</strong><br>单独使用this，则它指向全局(Global)对象<br>在浏览器中，window就是该全局对象那个为[object window];</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;this;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>严格模式下，如果单独使用，this也是指向全局(Global)对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            &quot;use strict&quot;;</span><br><span class="line">            var x&#x3D;this;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>函数中使用this(默认)</strong><br>在函数中，函数的所属者默认绑定到this上。<br>在浏览器中，window就是该全局对象为[object Window];</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            wfunction myFunction()&#123;</span><br><span class="line">                return this;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>函数中使用this(严格模式)</strong><br>严格模式下函数是没有绑定到this上，这时候this是undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            &quot;use strict&quot;;</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                return this;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>事件中的this</strong><br>在HTML事件句柄中，this指向了接收事件的HTML元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;this.style.display&#x3D;&#39;none&#39;&quot;&gt;</span><br><span class="line">        点击后就消失了</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>对象方法中绑定</strong><br>this是person对象，person对象是函数的所有者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var person&#x3D;&#123;</span><br><span class="line">                firstName:&quot;John&quot;,</span><br><span class="line">                lastName:&quot;Doe&quot;,</span><br><span class="line">                id:5555,</span><br><span class="line">                myFunction:function()&#123;</span><br><span class="line">                    return this;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;person.myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var person&#x3D;&#123;</span><br><span class="line">                firstName:&quot;John&quot;,</span><br><span class="line">                lastName:&quot;Doe&quot;,</span><br><span class="line">                id:5555,</span><br><span class="line">                myFunction:function()&#123;</span><br><span class="line">                    return this.firstName+&quot; &quot;+this.lastName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;person.myFunction();</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>this.firstName表示this(person)对象的firstName属性<br><strong>显示函数绑定</strong><br>在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境(context)，即this绑定的对象。<br>使用person2作为参数来调用person1.fullName方法时，this将指向person2,即使它是person1的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var person1&#x3D;&#123;</span><br><span class="line">                fullName:function()&#123;</span><br><span class="line">                    return this.firstName+&quot; &quot;+this.lastName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            var person2&#x3D;&#123;</span><br><span class="line">                firstName:&quot;John&quot;,</span><br><span class="line">                lastName:&quot;Doe&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">            var x&#x3D;person1.fullName.call(person2);</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;x;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript保留关键字</title>
    <url>/2020/03/04/JavaScript%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
<meta name="generator" content="Hexo 4.2.0"></head>
<body>
    <table border="1">
        <b>Javascript保留关键字</b>
        <p>JavaScripts的保留关键字不可以用作变量、标签或者函数名。有些保留字是作为JavaScript以后扩展使用</p>
        <a id="more"></a>
        <tbody id="Reserved">
            <tr></tr>
        </tbody>
        <p>*标记的关键字是ECMAscript5中新添加的</p>
    </table>
    <table>
        <b>JavaScript对象、属性和方法</b>
        <p>应该避免使用JavaScript内置的对象、属性和方法</p>
        <tbody id="ObjectPropertyMethod">
            <tr></tr>
        </tbody>
    </table>
    <table>
        <b>Java保留关键字</b>
        <tbody id="Java">
            <tr></tr>
        </tbody>
    </table>
    <table>
        <b>window保留关键字</b>
        <p>在HTML中，避免使用HTML和window对象和属性的名称作为JavaScript的变量和函数名</p>
        <tbody id="window">
            <tr></tr>
        </tbody>
    </table>
    <table>
        <b>HTML事件句柄</b>
        <tbody id="HTML">
            <tr></tr>
        </tbody>
    </table>
    <b>非标准JavaScript</b>
    <p>除了保留关键字，在JavaScript实现中也有一些废标准的关键字</p>
    <p>conset关键字，用于定义变量。一些JavaScript引擎把const当作var的同义词，另一些引擎恶霸const当作只读变量的定义</p>
    <p>Const是JavaScript的扩展，JavaScript引擎支持它用Firefox和chrome中，但是他并不是JavaScript标准ES3和ES5的组成部分。建议：不要使用它</p>
    <script>
        var Areserved=[
                         'abstract','arguments','else','eval','instanceof' ,'super*', 'boolean', 'enum*' ,'int', 'switch', 'break', 'export*',
                         'interface', 'synchronized', 'byte', 'extends*' ,'let' ,'this' ,'case' ,'false' ,'long',
                         'throw',"throws" ,'catch' ,'final' ,'native', 'trows', 'char', 'finally', 'new', 'transient', 'class*',
                         'float' ,'null','true' ,'const' ,'for' ,'package', 'try', 'continue' ,'function', 'private',
                         'typeof' ,'debugger' ,'goto','proteced' ,'var', 'default', 'if', 'public', 'void' ,'delete' ,
                         'implements', 'return', 'volatile', 'do' ,'import*', 'short' ,'while', 'double', 'in', 'static', 'with','yield'
                         ];
        var Areserved2=[
                        'Array','Date','eval','function','hasOwnProperty','Infinity','isFinite','isNaN','isPrototypeOf','length','Math','NaN',
                        'name','Number','Object','prototype','String','toString','undefined','valueOf'
        ];
        var Areserved3=[
                        'getClass','java','javaArray','javaClass','JavaObject','JavaPackage'
        ];
        var Areserved4=[
                        'alert','all','anchor','anchors','area','ssign','blur','button','checkbox','clearInterval','clearTimeout','clentInformation','close',
                        'closed','confirm','construclor','crypto','decodeURI','decodeURICompornent','defaultStatus','document','element','elements','embed','embeds',
                        'encodeURI','encodeURIComponent','escape','event','fileUpload','focus','form','forms','frame','innerHeight','innerWidth','layer','layers','link',
                        'location','mimeTypes','navigate','navigator','frames','frameRate','hidden','history','image','images','offscreenBuffering','open','opener','option',
                        'outerHeight','outrWidth','packages','pageXOffset','pageYOffset','parent','parseFloat','parseInt','password','pks11','plugin','prompt','propertylsEnum',
                        'radio','reset','screenX','screenY','scroll','secure','select','self','setinterval','setTimeout','status','submit','taint','text','textarea','top','unescape','untaint','window'
        ];
        var Areserved5=[
                        'onblur','onclick','onerror','onfocus','onkeydown','onkeypress','onkeyup','onmouseover','onload','onmouseup','onmousedown','onsubmit'
        ];
      function CreateTable(ImportArray,id,num){
           var Otable=document.getElementById(id);
           var otr=document.createElement("tr");
               Otable.appendChild(otr);
           var j=1;
           for(i=0;i<ImportArray.length;i++,j++){
               var otd=document.createElement("td");
                   otr.appendChild(otd);
                   otd.innerHTML=ImportArray[i];
                   if(j%num==0){
                       otr=document.createElement("tr");
                       Otable.appendChild(otr);
                       j=0;
                   }
           }
       }
       CreateTable(Areserved,"Reserved",5);
       CreateTable(Areserved2,"ObjectPropertyMethod",5)
       CreateTable(Areserved3,"Java",6);
       CreateTable(Areserved4,"window",5);
       CreateTable(Areserved5,"HTML",6);
   </script>
</body>
</html>]]></content>
  </entry>
  <entry>
    <title>JavaScript验证API</title>
    <url>/2020/03/03/JavaScript%E9%AA%8C%E8%AF%81API/</url>
    <content><![CDATA[<p><strong>约束验证DOM方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkValidity()     如果input元素中的数据是合法的返回true，否则返回false</span><br><span class="line">setCustomVaidity()   设置input元素的validationMessage属性，用于自定义错误提示信息的方法</span><br><span class="line">                     使用setCustomVaidity设置了自定义提示后，validity.customError就会变成true，则checkValidity总是会返回false。如果要重新判断需要取消自定义提示，方式如下:</span><br><span class="line">                     setCustomVaidity(&#39;&#39;)</span><br><span class="line">                     setCustomVaidity(null)</span><br><span class="line">                     setCustomVaidity(undefined)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>checkValidity()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input id&#x3D;&quot;id1&quot; type&#x3D;&quot;number&quot; min&#x3D;&quot;100&quot; max&#x3D;&quot;300&quot; required&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;验证&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function myFunction()&#123;</span><br><span class="line">                var inpObj&#x3D;document.getElementById(&quot;id1&quot;);</span><br><span class="line">                if(inpObj.checkValidity()&#x3D;&#x3D;false)&#123;</span><br><span class="line">                    document.getElementById(&quot;demo&quot;).innerHTML&#x3D;inpObj.validationMessage;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt; </span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>约束验证DOM属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">validity            布尔属性值，返回input输入值是否合法</span><br><span class="line">validationMessage   浏览器错误提示信息</span><br><span class="line">willValidate        指定input是否需要验证</span><br></pre></td></tr></table></figure>
<p><strong>Validity属性</strong><br>input元素的validity属性包含一系列勾玉validity数据属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customError         设置为true,如果设置了自定义的validity信息</span><br><span class="line">patterMismatch      设置为true，如果元素的值不匹配它的模式属性</span><br><span class="line">rangeOverflow       设置为true,如果元素的值大于设置的最大值</span><br><span class="line">rangeUnderflow      设置为true，如果元素的值小于它的最小值</span><br><span class="line">stepMismatch        设置为true，如果元素的值不是按照规定的step属性设置</span><br><span class="line">toolong             设置为true，如果元素的值超过了maxlength属性设置的长度</span><br><span class="line">typeMismatch        设置为true，如果元素的值不是预期相匹配的类型</span><br><span class="line">valueMissing        设置为true，如果元素(required属性)没有值</span><br><span class="line">valid               设置为true，如果元素的值是合法的</span><br></pre></td></tr></table></figure>
<p>如果输入的值大于100，显示一个信息<br>rangeOverflow属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;id1&quot; type&#x3D;&quot;number&quot; max&#x3D;&quot;100&quot;&gt;</span><br><span class="line">    &lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;验证&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    function myFunction()&#123;</span><br><span class="line">        var text&#x3D;&quot;&quot;;</span><br><span class="line">        if(document.getElementById(&quot;id1&quot;).validity.rangeOverflow)&#123;</span><br><span class="line">            text&#x3D;&quot;输入的值太大了&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML&#x3D;text;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;input&gt;</span><br></pre></td></tr></table></figure>
<p>如果输入的值小于100，显示一个信息<br>rangeUnderflow属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input id&#x3D;&quot;id1&quot; type&#x3D;&quot;number&quot; min&#x3D;&quot;100&quot; required&gt;</span><br><span class="line">        &lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;OK&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function myFunction()&#123;</span><br><span class="line">            var text&#x3D;&quot;&quot;;</span><br><span class="line">            var inpObj&#x3D;document.getElementById(&quot;id1&quot;);</span><br><span class="line">            if(!isNumeric(inpObj.value))&#123;</span><br><span class="line">                text&#x3D;&quot;输入的不是数字&quot;;</span><br><span class="line">            &#125;else if(inpObj.validity.rangUnderflow)&#123;</span><br><span class="line">                text&#x3D;&quot;输入的值太小&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                text&#x3D;&quot;输入正确&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;text;</span><br><span class="line">        &#125;</span><br><span class="line">        function isNumeric(n)&#123;</span><br><span class="line">            return !isNaN(parseFloat(n))&amp;&amp;isFinite(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript表单</title>
    <url>/2020/03/02/JavaScript%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<p><strong>JavaScript表单验证</strong><br>HTML表单验证可以通过JavaScript来完成<br>测试表单字段(fname)值是否存在，如果补偿装置，就弹出信息，阻止表单提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form name&#x3D;&quot;test&quot; action&#x3D;&quot;demo_form.php&quot; onsubmit&quot;return val()&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        名字:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;subimt&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        function val()&#123;</span><br><span class="line">            var x&#x3D;document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;</span><br><span class="line">            if(x&#x3D;&#x3D;null||x&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">                alert(&quot;需要输入名字&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>JavaScript验证输入的数字</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;请输入1到10之间的数字&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;input id&#x3D;&quot;num&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;num()&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        function num()&#123;</span><br><span class="line">            var x,text;</span><br><span class="line">            var x&#x3D;document.getElementById(&quot;num&quot;).value;</span><br><span class="line">            if(isNaN(x)||x&lt;1||x&gt;10)&#123;</span><br><span class="line">               text&#x3D;&quot;输入错误&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                text&#x3D;&quot;输入正确&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&quot;demo&quot;).innerHTML&#x3D;text;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>HTML表单自动验证</strong><br>HMTL表单验证也可以通过浏览器来自动完成<br>如果表单字段的值为空，required属性会阻止表单提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;demo_form.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot; required&#x3D;&quot;required&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>数据验证</strong><br>数据验证用于确保用于输入的数据时有效的<br>典型的数据验证有</p>
<ul>
<li>必需字段是否输入</li>
<li>用户是否输入了合法的数据</li>
<li>在数字字段是否输入了文本<br>大多数情况下，数据验证用于确保用户正确输入数据<br>数据验证可以使用不同方法来定义，并通过多种方法来调用<br>服务端数据验证是在数据提交到服务器上后再验证<br>客户端数据验证是在数据发送到服务器前，在浏览器上完成验证</li>
</ul>
<p><strong>HTML</strong><br>HTML新增了HTML表单的验证方式：约束验证<br>约束验证时表单被提交时浏览器用来实现验证的一种算法<br>HTML约束验证基于:</p>
<ul>
<li>HTML输入属性</li>
<li>css伪类选择器</li>
<li>DOM属性和方法</li>
</ul>
<p><strong>约束验证HTML输入属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disabled    规定输入的元素不可用</span><br><span class="line">max         规定输入元素的最大值</span><br><span class="line">min         规定输入元素的最小值</span><br><span class="line">pattem      规定输入元素值的模式</span><br><span class="line">required    规定输入元素字段是必需的</span><br><span class="line">type        规定输入元素的类型</span><br></pre></td></tr></table></figure>
<p><strong>约束验证css伪类选择器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disabled        选取属性为&quot;disabled&quot;属性的input元素</span><br><span class="line">invalid         选取无效的input元素</span><br><span class="line">optional        选择没有“required”属性的input元素</span><br><span class="line">reuired         选择有“required”属性的input元素</span><br><span class="line">vaild           选取有效值的input元素</span><br></pre></td></tr></table></figure>
<p><strong>E-mail验证</strong><br>函数检查输入的数据是否符合电子邮件的基本语法<br>也就是说，输入的数据必须包含@符号和点好(.)。同时，@不可以是邮件地址的首字符，并且@之后需有至少一个点号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;from name&#x3D;&quot;myform&quot; action&#x3D;&quot;demo-form.php&quot; onsubmit&#x3D;&quot;return validateForm();&quot; metho&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        Email:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">        &lt;&#x2F;from&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function validateForm()&#123;</span><br><span class="line">                var x&#x3D;document.form[&quot;myform&quot;][&quot;email&quot;].value;</span><br><span class="line">                var atops&#x3D;x.indexOf(&quot;@&quot;);</span><br><span class="line">                var dotops&#x3D;x.lastIndexOf(&quot;.&quot;);</span><br><span class="line">                if(atops&lt;1||dotops&lt;atops+2||dotops+2&gt;x.length)&#123;</span><br><span class="line">                    alert(&quot;不是一个有效的Email地址&quot;);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript使用误区</title>
    <url>/2020/03/02/JavaScript%E4%BD%BF%E7%94%A8%E8%AF%AF%E5%8C%BA/</url>
    <content><![CDATA[<p><strong>赋值运算符引用错误</strong><br>在JavaScript程序中如果在if条件语句中使用赋值运算符的等号(=)将会产生一个错误结果，正确的方法是使用比较运算符的两个等号(==)<br>if条件语句返回false因为x不等于6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;6);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>if条件语句返回true，因为条件语句执行为x赋值为6，6为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;6);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>if条件语句返回false因为条件执行为x赋值为0，0为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;0);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>比较运算符常见错误</strong><br>在常规的比较中，数据类型是被忽略的额，以下if条件语句返回true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                var y&#x3D;&quot;6&quot;;             </span><br><span class="line">                document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;y);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>在严格的比较运算符，===为恒等于计算符，调试检查表达式的值与类型，以下if条件语句返回false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                var y&#x3D;&quot;6&quot;;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;&#x3D;y);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>这种错误经常会出现在switch语句中，switch语句会使用恒等计算符(===)进行比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                switch(x)&#123;</span><br><span class="line">                    case 6:alert(&quot;666&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">结果会弹出666</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                switch(x)&#123;</span><br><span class="line">                    case &quot;6&quot;:alert(&quot;666&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">结果不会弹出666</span><br></pre></td></tr></table></figure>
<p><strong>加法与连接注意事项</strong><br>加法是两个数字相加<br>连接是两个字符串连接<br>JavaScript的加法和连接都使用+运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10+5;     x的结果为15</span><br><span class="line">var x&#x3D;10+&quot;5&quot;;   x的结果为&quot;105&quot;</span><br></pre></td></tr></table></figure>
<p>使用变量相加结果也不一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10;</span><br><span class="line">var y&#x3D;5;</span><br><span class="line">var z&#x3D;x+y;      z的结果为15</span><br><span class="line"></span><br><span class="line">var x&#x3D;10;</span><br><span class="line">var y&#x3D;&quot;5&quot;;</span><br><span class="line">var z&#x3D;x+y       z的结果为105</span><br></pre></td></tr></table></figure>
<p><strong>浮点型数据使用注意事项</strong><br>JavaScript中的谁有数据都是以64位浮点型(float)来储存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;0.1;</span><br><span class="line">var y&#x3D;0.2;</span><br><span class="line">var z&#x3D;x+y;          z的结果为0.30000000000000004</span><br><span class="line">if(z&#x3D;&#x3D;0.3)          返回false</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，可以用整数的乘除法来解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var z&#x3D;(x*10+y*10)&#x2F;10    z的结果为0.3</span><br></pre></td></tr></table></figure>
<p><strong>JavaScript字符串分行</strong><br>JavaScript允许我们在字符串中使用断行语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;</span><br><span class="line">&quot;666&quot;;</span><br></pre></td></tr></table></figure>
<p>但是，字符串中直接使用回车换行是会报错的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;&quot;66</span><br><span class="line">666&quot;;</span><br></pre></td></tr></table></figure>
<p>字符串换行需要使用反斜杠()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;&quot;66\</span><br><span class="line">666&quot;;</span><br></pre></td></tr></table></figure>
<p><strong>错误的使用分号</strong><br>以下例子中，if语句失去方法体，原if语句的方法体作为独立的代码块被执行，导致错误的输出结果<br>由于分号的使用错误，if语句中的代码块就一定会执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">               if(x&#x3D;&#x3D;10);&#123;</span><br><span class="line">                   document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;6666&quot;;</span><br><span class="line">               &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>return语句使用注意事项</strong><br>JavaScript默认是在代码最后一行自动结束<br>有分号的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var power&#x3D;10;</span><br><span class="line">    return a*power;</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br></pre></td></tr></table></figure>
<p>无分号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var power&#x3D;10</span><br><span class="line">    return a*power</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br></pre></td></tr></table></figure>
<p>JavaScript也可以使用多行来结束一个语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var </span><br><span class="line">    power&#x3D;10;</span><br><span class="line">    return a*power</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br><span class="line">&#96;&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>function myfuncion(a){<br>    var<br>    power=10;<br>    return  由于 return 是一个完整的语句，所以 JavaScript 将关闭 return 语句。<br>    a*power;<br>}<br>结果为undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**数组中使用名字来索引**</span><br><span class="line">JavaScript不支持使用名字来索引数组,只允许使用数字索引</span><br></pre></td></tr></table></figure>
<p>var person=[];<br>person[0]=”name”;<br>person[1]=”lastname”;<br>person[2]=”46”;<br>var x=person.length;        person.length返回3<br>var y=person[0];            person[0]返回”name”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在JavaScript中，对象使用名字作为索引</span><br><span class="line">如果使用名字作为索引，当访问数组时，JavaScript会把数组重新定义为标准对象</span><br><span class="line">执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误</span><br></pre></td></tr></table></figure>
<p>var person=[];<br>person[“firstName”]=”long”;<br>person[“lastName”]=”Doe”;<br>person[“age”]=46;<br>var x=person.length;    person.length返回0<br>var y=person[0];        person[0]返回undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**定义数组元素，最后不能添加逗号**</span><br><span class="line">数组最后一个值的后面添加逗号虽然与语法没有问题,但是在不同的浏览器可能得到不同的结果</span><br></pre></td></tr></table></figure>
<p>var color=[5,6,7,];     这样数组的长度可能为3，也可能为4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确的定义方式</span><br></pre></td></tr></table></figure>
<p>var color=[5,6,7];</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**定义对象，最后不能添加逗号**</span><br><span class="line">错误定义方式</span><br></pre></td></tr></table></figure>
<p>color={name:”long”,age:118,}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确定义方式</span><br></pre></td></tr></table></figure>
<p>color={name:”long”,age:118}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Undefined不是Null**</span><br><span class="line">在JavaScript中，null用于对象，undefined用于变量、属性和方法</span><br><span class="line">对象只有被定义才有可能为null，否则为undefined</span><br><span class="line">如果想要测试对象是否存在，在对象还未定义时佳能会抛出一个错误</span><br><span class="line">错误的使用方法</span><br></pre></td></tr></table></figure>
<pre><code>if(color!==null&amp;&amp;typeof color!==&quot;undefined&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确的使用方法需要先使用typeof来检测对象是否已经定义了</span><br></pre></td></tr></table></figure>
<pre><code>if(typeof color!==&quot;undefined&apos;&amp;&amp;color!==null)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序块作用域</span><br><span class="line">在每个代码块中JavaScript不会创建一个新的作用域，一般各个代码块的作用域都是全局的</span><br></pre></td></tr></table></figure>
<script>
for(var i=0;i<10;i++){}
console.log(i);
</script>
<p>````</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript严格模式</title>
    <url>/2020/03/01/JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>JavaScript严格模式(strict mode)即在严格的条件下运行<br><strong>使用”use strict指令”</strong><br>“use strict”指令在JavaScript1.8.5（ECMAScript5）中新增<br>它不少一条语句，但是是一个字面量表达式，在JavaScript旧版本会被忽略<br>“use strict”的目的是指定代码在严格条件下执行<br>使用严格模式为了消除JavaScript语法的一些不合理、不严谨之处、减少一些怪异行为，消除代码运行的一些不安全之处，保证代码的运行安全，提高编译器效率，增加运行速度，为JavaScript新版本做铺垫。<br>严格模式的限制<br>不允许使用未声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&quot;use strict&quot;</span><br><span class="line">x&#x3D;3.14       报错(x未定义</span><br><span class="line">)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">进入浏览器的开发者模式可以发现出现“Uncaught ReferenceError: x is not defined”这个错误说明严格模式下不能使用未声明的变量</span><br></pre></td></tr></table></figure>
<p>在函数内部声明是局部作用域(旨在函数内使用严格模式)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">x&#x3D;3;    不报错</span><br><span class="line">myFunction()</span><br><span class="line">function myFunction()&#123;</span><br><span class="line"> &quot;use strict&quot;;</span><br><span class="line">  y&#x3D;3;   报错y未定义</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对象也是一个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  x&#x3D;&#123;z:10,y:20&#125; 报错（x未定义）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除变量或对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  var x&#x3D;123;</span><br><span class="line">  delete x;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  function x(name,lastname)&#123;&#125;; </span><br><span class="line">  delete x;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许变量重名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  function x(y,y)&#123;&#125;; 报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用八进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var x&#x3D;010;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用转义字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var x&#x3D;\010;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许对只读属性赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var obj&#x3D;&#123;&#125;;</span><br><span class="line">  Object.defineProperty(obj,&quot;x&quot;.&#123;value,writable:false&#125;);</span><br><span class="line">  obj.x&#x3D;3;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许对一个使用getter方法读取的属性进行赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var obj&#x3D;&#123;getx()&#123;return 0&#125;&#125;;</span><br><span class="line">  obj.x&#x3D;3     报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除一个不允许伤处的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  delete Object.prototype;  报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>变量名不能使用”eval”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var eval&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>变量名不能使用”argument”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">   var argument&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用以下语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  with(Math)&#123;x&#x3D;cos(2)&#125;;  报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>由于一些安全原因,在作用域eval()创建的变量不能被调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  eval(&quot;var x&#x3D;2&quot;);</span><br><span class="line">  alet(x);   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>禁止this关键字指向全局对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function f()&#125;&#123;</span><br><span class="line">  return  !this;   返回false，因为“this”指向全局对象，“！this”就是false</span><br><span class="line">&#125;</span><br><span class="line">function f()&#123;</span><br><span class="line">   &quot;use strict&quot;;</span><br><span class="line">   return !this;    返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function  f()&#123;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  this.a&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">f();  报错，this未定义</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>保留关键字</strong><br>为了向将来JavaScript的新版本过度，严格模式新增了一些保留关键字</p>
<ul>
<li>implement</li>
<li>interface</li>
<li>let</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>static</li>
<li>yield<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">   var public&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>“use strict” 指令只允许出现在脚本或函数的开头。</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript变量提升</title>
    <url>/2020/03/01/Javascript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>JavaScript中，函数及变量的声明都将被提升到函数的最顶部<br>JavaScript中，变量可以在使用后声明，也就是变量可以先使用声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 例1:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            x&#x3D;5;    变量设置为5</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);  查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x;   在元素中显示x</span><br><span class="line">            var x;      声明x</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果5</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例2</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x;      声明x</span><br><span class="line">            x&#x3D;5;    变量设置为5</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);  查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x;   在元素中显示x</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果5</span><br></pre></td></tr></table></figure>
<p>变量提升:函数声明和变量声明注释会被解释器悄悄地”提升”到方法地最顶部<br><strong>Javascript初始化不会提升</strong><br>JavaScript只有声明地变量会提升，初始化地不会</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例1:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;8;    初始化x</span><br><span class="line">            var y&#x3D;9;    初始化y</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);       查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x+&quot; &quot;+y;                     显示x和y</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"> 运行结果8 9</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例2</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;8;    初始化x</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);查找元素</span><br><span class="line">            elem.innerHTML&#x3D;&quot;x&#x3D;&quot;+x+&quot; &quot;+&quot;y&#x3D;&quot;+y;    显示x和y</span><br><span class="line">            var y&#x3D;9;    初始化y</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果x&#x3D;8 y&#x3D;undefined</span><br></pre></td></tr></table></figure>
<p>例2中的y输出为undefined，这是因为变量声明（var y）提升了，但是初始化（y=7）并不会提升，所以变量y是一个未定义变量<br><strong>在头部声明变量</strong><br>为避免因为变量提升而出现的问题，通常在每个作用域开始之前声明变量，这也是JavaScript解析的正常步骤。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript调试</title>
    <url>/2020/02/29/Javascript%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<ul>
<li>console.log()方法<br>如果浏览器支持调试,可以使用console.log()方法在调试窗口上打印Javascript<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;5;</span><br><span class="line">b&#x3D;6;</span><br><span class="line">c&#x3D;b-a;</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure></li>
<li>设置断点<br>在调试窗口中，设置Javascript代码的断点<br>在每个断点上，都会停止执行JavaScript代码，以便于检查JavaScript变量的值<br>检查完毕后，可以重新执行代码</li>
<li>debugger关键字<br>debugger关键字用于停止执行JavaScript，并调用调试函数<br>这个关键字与调试工具中设置断点的效果是一样的<br>如果没有调试可用，debugger语句无法工作<br>开启debugger，代码第三行前停止执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;开启调试工具，在代码执行到第三行前会停止执行。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x &#x3D; 15 * 5;</span><br><span class="line">debugger;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;          75 </span><br><span class="line">&lt;&#x2F;script&gt;                                               开启调试工具，在代码执行到第三行前会停止执行。</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 错误 - throw、try 和 catch</title>
    <url>/2020/02/29/JavaScript%20%E9%94%99%E8%AF%AF%20-%20throw%E3%80%81try%20%E5%92%8C%20catch/</url>
    <content><![CDATA[<p>try     语句测试代码块的错误<br>catch   语句处理错误<br>throw   语句创建自定义错误<br>finally 语句在try和catch语句之后，无论是否有触发异常，该语句都会执行</p>
<ul>
<li>JavaScript错误<br>当Javascript引擎执行JavaScript代码时，会发生各种错误<br>可能是语法错误，通常是程序编码错误或错别字<br>可能是拼写错误或者语句中缺少的功能(浏览器的不同)<br>可能是由于来自服务器或用户的错误输出而导致的错误<br>还有其他不可预知的因素</li>
<li>JavaScript抛出（throw）错误<br>当错误发生时，当程序出问题时，JavaScript引擎通常会停止，并生成一个错误消息<br>对于这种情况的技术术语时:JavaScript抛出一个错误</li>
<li>JavaScript try和catch<br>try语句允许我们定义哎执行时进行错误测试的代码块<br>catch语句允许我们定义当try代码块发生错误时，所执行的代码块<br>JavaScript语句try和catch时成对出现的<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    异常的抛出</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    异常的捕获与处理</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    结束处理</span><br><span class="line">&#125;</span><br><span class="line">如:</span><br><span class="line">var text&#x3D;&quot;&quot;;</span><br><span class="line">function message()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">       adddlert(&quot;welcome guest!&quot;)</span><br><span class="line">    &#125;catch(err)&#123;</span><br><span class="line">        test&#x3D;&quot;有一个错误\n&quot;;</span><br><span class="line">        test+&#x3D;&quot;错误描述&quot;+err.message+&quot;\n&quot;; &#x2F;&#x2F;错误原因没有finally</span><br><span class="line">        test+&#x3D;&quot;点击确定继续\n&quot;;</span><br><span class="line">        alert(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>finally语句<br>finally语句不论之前的tryhecatch中是否产生异常都会执行该代码块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myFunction()&#123;</span><br><span class="line">    var message,x;</span><br><span class="line">    message&#x3D;document.getElementById(&quot;p1&quot;);</span><br><span class="line">    message.innerHTML&#x3D;&quot;&quot;;</span><br><span class="line">    x&#x3D;document.getElementById(&quot;demo&quot;).value;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(x&#x3D;&#x3D;&quot;&quot;)throw&quot;值是空的&quot;;</span><br><span class="line">        if(isNaN(x))throw&quot;值不是一个数字&quot;;</span><br><span class="line">        x&#x3D;Number(x);</span><br><span class="line">        if(x&gt;3)throw&quot;大&quot;;</span><br><span class="line">        if(x&lt;&#x3D;3)throw&quot;小&quot;；</span><br><span class="line">    &#125;</span><br><span class="line">    catch(err)&#123;</span><br><span class="line">        message.innerHTML&#x3D;&quot;错误:&quot;+err+&quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    finally&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).value&#x3D;&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Throw语句<br>throw语句允许我们创建自定义错误<br>正确的技术术语是:创建或抛出异常（exception）<br>如果把throw与try和catch一起使用，能够控制程序流，并生成自定义的错误消息<br>throw exception <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myFunction()&#123;</span><br><span class="line">    var message,x;</span><br><span class="line">    message&#x3D;document.getElementById(&quot;p1&quot;);</span><br><span class="line">    message.innerHTML&#x3D;&quot;&quot;;</span><br><span class="line">    x&#x3D;document.getElementById(&quot;demo&quot;).value;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(x&#x3D;&#x3D;&quot;&quot;)throw&quot;值是空的&quot;;</span><br><span class="line">        if(isNaN(x))throw&quot;值不是一个数字&quot;;</span><br><span class="line">        x&#x3D;Number(x);</span><br><span class="line">        if(x&gt;3)throw&quot;大&quot;;</span><br><span class="line">        if(x&lt;&#x3D;3)throw&quot;小&quot;；</span><br><span class="line">    &#125;</span><br><span class="line">    catch(err)&#123;</span><br><span class="line">        message.innerHTML&#x3D;&quot;错误:&quot;+err+&quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    finally&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).value&#x3D;&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript正则表达式</title>
    <url>/2020/02/28/Javascript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/</url>
    <content><![CDATA[<ul>
<li>正则表达式<br>正则表达式是由一个字符序列形成的搜索模式<br>在文本中搜索数据时，可以用搜索模式来描述要查询的内容<br>正则表达式可以是一个简单的字符，或者一个更复杂的模式<br>正则表达式可用于所有文本搜索和文本替换的操作</li>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br><span class="line">例子: var patt&#x3D;&#x2F;runoob&#x2F;i</span><br><span class="line">&#x2F;runoob&#x2F;    是一个正则表达式</span><br><span class="line">runoob      是一个正则表达式主体(用于搜索)</span><br><span class="line">i           是一个修饰符(搜索不区分大小写)</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>使用字符串方法<br>在JavaScript中，正则表达式通常用于两个字符串方法:search()和replace()<br>search方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子字符串的起始位置<br>replace()方法用于字符串中用有些字符替换另一些字符，或替换一个正则表达式匹配的子字符串</li>
<li>search()方法使用正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用正则表达式搜索&quot;Runoob&quot;字符串,且不区分大小写</span><br><span class="line">var str&#x3D;&quot;Runnob abc&quot;</span><br><span class="line">var n&#x3D;str.search(&#x2F;Runoob&#x2F;i);    结果为1</span><br></pre></td></tr></table></figure></li>
<li>search()方法使用字符串<br>serach方法可使用字符串作为参数,字符串参数会转换为正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;Runoob abc&quot;;</span><br><span class="line">var n&#x3D;str.search(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure></li>
<li>replace()方法使用正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用正则表达式且不区分大小写将字符串中的abc替换成efg</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;abc123&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.getElementById(&quot;demo&quot;).innerHTML;</span><br><span class="line">var txt&#x3D;a.replace(&#x2F;abc&#x2F;i,&quot;efg&quot;);</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML;&#x3D;txt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>replace()方法使用字符串<br>replace()方法将接收字符串作为参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;abc123&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.getElementById(&quot;demo&quot;).innerHTML;</span><br><span class="line">var txt&#x3D;a.replace(&quot;abc&quot;,&quot;efg&quot;);</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML;&#x3D;txt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>正则表达式修饰符<br>修饰符可以在全局搜索中不区分大小写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i               执行对大小写不敏感的匹配</span><br><span class="line">g               执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</span><br><span class="line">m               执行多行匹配</span><br></pre></td></tr></table></figure></li>
<li>正则表达式模式<br>方括号用于查找某个范围内的字符:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[abc]       查找方括号之间的任何字符</span><br><span class="line">[0-9]       查找如何从0至9的数字</span><br><span class="line">(x|y)       查找任何人以|分隔的选项</span><br></pre></td></tr></table></figure>
元字符是拥有特殊含义的字符:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d          查到数字</span><br><span class="line">\s          查找空白字符</span><br><span class="line">\b          匹配单词边界</span><br><span class="line">\uxxxx      查找以十六进制数xxx规定的Unicode字符</span><br></pre></td></tr></table></figure>
量词<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n+          匹配如何包含至少一个n的字符串</span><br><span class="line">n*          匹配如何包含零个或多个n的字符串</span><br><span class="line">n？         匹配如何包含零个或一个n的字符串</span><br></pre></td></tr></table></figure></li>
<li>使用RegExp对象<br>在Javascript中，RegExp对象是一个预定义了属性和方法的正则表达式对象<br>使用test()<br>test()方法是一个正则表达式的方法<br>test()方法用于检测一个字符串是否匹配某个模式，如果字符串中含有的匹配的文本，则返回true，否则返回false<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var patt&#x3D;&#x2F;e&#x2F;;</span><br><span class="line">patt.test(&quot;abcdefg&quot;)    返回值true</span><br><span class="line">&#x2F;e&#x2F;.test(&quot;abcdefg&quot;);</span><br></pre></td></tr></table></figure>
使用exec()<br>exec()方法是一个正则表达式的方法<br>exec()方法用于检索字符串中的正则表达式的匹配<br>该函数返回一个数组，其中存放匹配的结果，如果未找到匹配，则返回值为null.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e&#x2F;.exec(abcdefg);      输出为e</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript类型转换</title>
    <url>/2020/02/27/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p><strong>Number（）转换为数字，String()转换为字符串，Boolean转换为布尔值</strong><br><strong>JavaScript数据类型</strong><br>    5种数据类型</p>
<ul>
<li>string  </li>
<li>number </li>
<li>boolean </li>
<li>object </li>
<li>function <a id="more"></a>
 3种对象类型</li>
<li>Object</li>
<li>Date</li>
<li>Array<br> 2个不包含任何值的数据类型</li>
<li>null</li>
<li>undefined</li>
<li>可以使用tyof操作符查看JavaScript变量的数据类型 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot; 返回 string</span><br><span class="line">typeof  3.14  返回 number</span><br><span class="line">typeof  false 返回 boolean</span><br><span class="line">typeof [1,2,3]返回 object</span><br><span class="line">typeof &#123;age:3&#125;返回 object</span><br><span class="line">typeof new Date()返回object</span><br><span class="line">typeof function()&#123;&#125;返回function</span><br><span class="line">typeof mycar  返回undefined</span><br><span class="line">typeof null   返回object</span><br></pre></td></tr></table></figure>
 NaN 的数据类型是 number<br> 数组(Array)的数据类型是 object<br> 日期(Date)的数据类型为 object<br> null 的数据类型是 object<br> 未定义变量的数据类型为 undefined<br> 如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</li>
<li>可以使用constructor查看JavaScript变量的构造函数 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“John”.constructor          返回函数String()</span><br><span class="line">(3.14).constructor          返回函数Number()</span><br><span class="line">false.constructor           返回函数Boolean()</span><br><span class="line">[name:&#39;abc&#39;].constructor    返回函数Array()</span><br><span class="line">&#123;name:&#39;abc&#39;&#125;.constructor    返回函数Object()</span><br><span class="line">new Date().constructor      返回函数Object()</span><br><span class="line">function()&#123;&#125;.constructor    返回函数function()</span><br></pre></td></tr></table></figure></li>
<li>将数字转换为字符串<br>全局方法String()可以将数字转换为字符串<br>该方法可用于如何类型的数字、字母、变量、表达式；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(x)       将变量x转换为字符串并返回</span><br><span class="line">string(123)     将变量123转换为字符串并返回</span><br><span class="line">string(100+1)   将数字表达式转换为字符串并返回</span><br></pre></td></tr></table></figure>
Number方法tostring()同样也有效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x.tostring()</span><br><span class="line">(123).tostring()</span><br><span class="line">(100+1).tostring()</span><br></pre></td></tr></table></figure>
Number方法还可以使用其他的方法把数字转换为字符串:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toExponential()     把对象的值转换为指数计数法</span><br><span class="line">toFixed()           把数字转换为字符串，结果的小数点后有指定位数的数字</span><br><span class="line">toPrecision()       把数字格式化为指定的长度</span><br></pre></td></tr></table></figure></li>
<li>将布尔值转换为字符串<br>全局方法String()可以把布尔值转换为字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(false)   返回&quot;false&quot;</span><br><span class="line">String(true)    返回&quot;true&quot;</span><br></pre></td></tr></table></figure>
Boolean方法toString()也有相同的效果<br>false.toString()    返回”false”<br>true.toString()     返回”true”</li>
<li>将日期转换为字符串<br>Date()返回字符串<br>Date()              返回当前计算机的时间<br>全局方法String()可以将日期对向转换为字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(new Date())  返回当前计算机的时间</span><br></pre></td></tr></table></figure>
Date方法toString()也有相同的效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj&#x3D;new Date()</span><br><span class="line">obj.toString()      返回当前计算机的时间</span><br></pre></td></tr></table></figure>
在Date方法中还有更多日期转换字符串的函数:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDate()       从Date对象返回一个月中的某一天(1~31)</span><br><span class="line">getDay()        从Date对象返回一周中的某一天(0~6)</span><br><span class="line">getFullYear()   从Date对象以四位数字返回年份</span><br><span class="line">getHours()      返回Date对象的小时(0~23)</span><br><span class="line">getMillisecond()返回Date对象的毫秒(0~999)</span><br><span class="line">getMinutes()    返回Date对象的分钟(0~59)</span><br><span class="line">getMonth()      返回Date对象的月份(0~11)</span><br><span class="line">getSeconds()    返回Date对象的秒数(0~59)</span><br><span class="line">getTime()       返回1970年1月1日至今的毫秒数</span><br></pre></td></tr></table></figure></li>
<li>将字符串转换为数字<br>全局方法Number()可以将字符串转换为数字<br>字符串包含的数字“3.14”转换为数字3.14<br>空字符串转换为0<br>其他字符串会转换为NaN(不是个数字)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number(&quot;3.14&quot;)      返回3.14</span><br><span class="line">Number(&quot; &quot;)         返回0</span><br><span class="line">Number(&quot;&quot;)          返回0</span><br><span class="line">Number(&quot;11  222&quot;)   返回NaN</span><br></pre></td></tr></table></figure>
Number方法，还有其他字符串转为数字的方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat()         解析一个字符串，并返回一个浮点数</span><br><span class="line">parseInt()           解析一个字符串，并返回一个整数</span><br></pre></td></tr></table></figure></li>
<li>一元运算符 +<br>Operator +  可用于将变量转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var y&#x3D;&quot;5&quot;;          y是一个字符串</span><br><span class="line">var x&#x3D;+y;           x是一个数字</span><br></pre></td></tr></table></figure>
如果变量不能转换，它仍然会是一个数字，但值为NaN(不是一个数字)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var y&#x3D;“abc”         y是一个字符串</span><br><span class="line">var x&#x3D;+y;           x是一个数字（NaN）</span><br></pre></td></tr></table></figure></li>
<li>将布尔值转换为数字<br>全局方法Number()可将布尔值转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number(false)       返回0</span><br><span class="line">Number(true)        返回1</span><br></pre></td></tr></table></figure></li>
<li>将日期转换为数字<br>全局方法Number()可将日期转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date&#x3D;new Date()</span><br><span class="line">Number(date)        返回1404568027739</span><br></pre></td></tr></table></figure>
日期方法getTime()也有相同的效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date&#x3D;new Date()</span><br><span class="line">date.getTime()       返回1404568027739</span><br></pre></td></tr></table></figure></li>
<li>自动转换类型<br>当JavaScript测试操作一个”错误”的数据类型时，会自动转换为”正确”的数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5+null      返回5       null转换为0</span><br><span class="line">&quot;5&quot;+null    返回&quot;5null&quot; null转换为&quot;null&quot;</span><br><span class="line">&quot;5&quot;+1       返回&quot;51&quot;    1转换为&quot;1&quot;</span><br><span class="line">&quot;5&quot;-1       返回4       &quot;5&quot;转换为5</span><br></pre></td></tr></table></figure></li>
<li>自动转换字符串<br>当尝试输出一个对象或者一个变量时Javascript会自动调用变量的toString()方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHtml&#x3D;myvar;</span><br><span class="line">myVar&#x3D;&#123;&quot;name&quot;:&quot;abc&quot;&#125;    toString转换为&quot;[object  Object]&quot;</span><br><span class="line">myVar&#x3D;[1,2,3]           toString转换为&quot;1,2,3&quot;</span><br><span class="line">myVar&#x3D;new Date()        toString转换为&quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;</span><br></pre></td></tr></table></figure>
数字和布尔值经常相互转换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myVar&#x3D;123       toString转换为&quot;123&quot;</span><br><span class="line">myVar&#x3D;true      toString转换为&quot;true&quot;</span><br><span class="line">myVar&#x3D;false     toString转换为&quot;false&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript typeof null undefind</title>
    <url>/2020/02/27/JavaScript%20typeof%E3%80%81null%E3%80%81undefined/</url>
    <content><![CDATA[<ul>
<li><strong>typeof操作符</strong><br>可以使用typeof操作符来检测变量的数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot; 返回 string</span><br><span class="line">typeof  3.14  返回 number</span><br><span class="line">typeof  false 返回 Boolean</span><br><span class="line">typeof [1,2,3]返回 object</span><br><span class="line">typeof &#123;age:3&#125;返回 object</span><br></pre></td></tr></table></figure>
JavaScript中数组是一种特殊的对象类型<a id="more"></a></li>
<li><strong>null</strong><br>null：主动释放一个变量引用的对象，表示一个变量不再指向如何对象地址<br>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为null<br>在JavaScript中null表示“什么都没有”<br>null是一个只有一个值的特殊类型，表示一个空对象引用<br>用typeof检测null返回是object<br>可以把一个变量设置为null起到清空对象的作用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;null; 值为null（空），但类型为对象</span><br></pre></td></tr></table></figure></li>
<li><strong>undefined</strong><br>undefined：是属于没有赋值变量的默认值，指定赋值<br>在JavaScript中，undefined是一个没有设置值的变量<br>typeof一个没有值的变量会返回undefined<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person 值为undefined，类型为undefined</span><br></pre></td></tr></table></figure>
任何变量都可以通过设置值为undefined来清空，类型为undefined<br>var person=undefined; 值为undefined，类型为undefined</li>
<li><strong>undefined和null区别</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof  undefined undefined     null&#x3D;&#x3D;&#x3D;undefined false</span><br><span class="line">typeof  null      object        null&#x3D;&#x3D;undefinde  true</span><br></pre></td></tr></table></figure>
共同点：都是原始类型，保存在栈中变量本地<br>不同点：<br>（1）undefined表示变量声明过但并未赋值，是属于未赋值变量默认值<br>（2）null表示一个变量将来可能指向一个对象，一般用于主动释放指向对象的引用<br>延伸—垃圾回收站<br>专门释放对象内存的程序<br>（1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收站<br>（2）只有一个对象不再被如何变量引用时，才释放</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript break和continue语句</title>
    <url>/2020/02/27/JavaScript%20breakhecontinue%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<ul>
<li><strong>break语句</strong><br>break语句跳出循环后，会继续执行该循环之后的代码（如果有的话）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">    if(i&#x3D;&#x3D;5)&#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    x&#x3D;x+&quot;this number is&quot;+i+&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><strong>continue语句</strong><br>continue语句中断循环中的迭代，如果出现了指定的条件，然后继续循环下一个迭代<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0;i&lt;&#x3D;10;i++)&#123;</span><br><span class="line">    if(i&#x3D;5)</span><br><span class="line">    continue;</span><br><span class="line">    x&#x3D;x+&quot;The number is &quot;+i+&quot;&lt;br&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript循环语句</title>
    <url>/2020/02/27/JavaScript%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<ul>
<li><strong>JavaScript for 循环</strong><br>循环可以将代码块执行指定的次数<br>如果希望一边又一遍地运行相同的代码，并且每次的值都不同，那么口语使用循环<br>JavaScript支持不同类型的循环：<br>for 循环一定的次数代码块<br>for循环的语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for（语句1；语句2；语句3）</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
语句1（代码块）开始前执行（在循环开始之前设置变量）<br>语句2 定义运行循环（代码块）的条件（定义循环运行的条件）<br>语句3 在循环（代码块）已被执行之后执行（在每次代码块已被执行后增加一个值）<br>语句1是可选的，也就是说不适用语句1也是可以的，可以在语句1中的初始化容易（或者多个）值<br>语句2同样是可选的<br>如果省略语句2，那么必须在循环内特工break否则循环就无法停下（死循环）浏览器可能会崩溃<br>如果语句2返回true，则循环再次开始，如果为false，则循环结束<br>语句3可选的<br>语句3通常是增加初始化变量的值，有多种用法增量可以实分数（i–）或者更大（i=i+15）<br>语句3省略的话要在循环内部增加相应的代码<br>for/in 循环遍历对象的属性<br>for/in循环语句<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#123;name:&#39;abc&#39;,age:18&#125;</span><br><span class="line">for（x in person） x为属性名</span><br><span class="line">&#123;</span><br><span class="line">    text&#x3D;text+person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
定义数组后对数组进行赋值，之间如有某些下标未适应（即未赋值），在遍历的时候，采用一般的for循环和for…in循环得到的结果不同<br>for…in循环会自动跳过那些没被赋值的元素，而for循环则不会，它会显示出undefined<br>while 当指定的条件为true时循环指定的代码块<br>while循环语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果忘记增加条件中所用遍历的值，该循环永远不会结束（死循环），浏览器可能会崩溃<br>do/while 同样指定的退奖为true时循环指定的代码块，该循环会在检查条件是否为真之前先运行一次代码块，如果条件为false停止循环，为true继续运行<br>do/while语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">wile（条件）</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript条件语句</title>
    <url>/2020/02/26/JavaScript%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p><strong>条件语句基于不同的条件来执行不同的动作</strong><br><strong>条件语句</strong><br>在JavaScript中，我们可使用if、if…else、if…else if…else、switch语句<br><strong>if语句，只有指定条件为true时，使用该语句来执行代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition）&#123;</span><br><span class="line">    当条件为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>if…else语句 当条件为true时执行代码，当条件为false时执行其他代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition）&#123;</span><br><span class="line">    当条件为true时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    当条件不为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>if…else if…else语句使用该语句来选择多个代码块之一来执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition1）&#123;</span><br><span class="line">    当条件1为true时执行的代码</span><br><span class="line">&#125;else if（condition2）&#123;</span><br><span class="line">    当条件2为true时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">     当条件1和条件2都不为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用小写的if 用大写IF会生成JavaScript错误<br><strong>switch语句使用该语句来选择多个代码块之一来执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">            执行代码块1</span><br><span class="line">            break;</span><br><span class="line">    case 2:</span><br><span class="line">            执行代码块2</span><br><span class="line">            break;</span><br><span class="line">    default:</span><br><span class="line">            与case1和case2不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工作原理：首先设置表达式n（通常一个变量）随后表达式的值会与结构中的每个case的值做比较如果存在匹配，则与该case关联的代码块会被执行。使用break来阻止代码自动地向一个case运行。<br>使用default关键字来规定匹配不存在时做的事情</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript数据类型</title>
    <url>/2020/02/24/Javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Javascript数据类型"><a href="#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a>Javascript数据类型</h1><ul>
<li><strong>值类型：字符串（String）、数字（Number）、布尔（Boolean）、对空（Null）、未定义（Undefined）</strong></li>
<li><strong>引用类型：对象（Object）、数组（Array）、函数（Function）</strong></li>
<li><strong>Javascript拥有动态类型</strong><br>  Javascript拥有动态类型意味着系统的变量可用作不同的类型<br>  <code>var x;</code>         x为undefined<br>  <code>var x=5;</code>       x为数字<br>  <code>var x=&quot;John&quot;;</code>  x为字符串</li>
<li><strong>Javascript字符串</strong><br>  字符串是储存字符<code>（比如“Bill Gates”）</code>的变量<br>  字符串引号中可以添加任意文本,可用双引号或单引号<br>  <code>var carname=&quot;Volvo&quot;;</code><br>  <code>var carname=&#39;Volvo&#39;;</code><br>  可以在字符串中使用引号，只要不匹配包围字符春的引号即可<br>  <code>var answer=&quot;It alright&quot;;</code><br>  <code>var answer=&quot;He is called &#39;Johnny&#39;&quot;;</code><br>  <code>var answer=&#39;He is called &quot;Johnny&quot;&#39;;</code>  <a id="more"></a></li>
<li><strong>Javascript数字</strong><br>  JavaScript只用一种数字类型。数字可以带小数点，也可以不带<br>  <code>var x1=4.00;</code>使用小数点来写<br>  <code>var x2=4;</code>不适用小数点来写<br>  <strong>极大或极小的数字可以通过科学（指数）计数法来书写</strong>‘<br>  <code>var x1=123e;</code>12300000<br>  <code>var x2=123e-5;</code>0.00123</li>
<li><strong>Javascript布尔</strong><br>  布尔（逻辑）只有两个值：true或false<br>  <code>var x=true;</code><br>  <code>var y=false;</code><br>  布尔常用在条件测试中</li>
<li><strong>Javascript数组</strong><br>  下面代码创建名为cars的数组  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cars&#x3D;new Array();</span><br><span class="line">cars[0]&#x3D;&quot;abc&quot;;</span><br><span class="line">cars[1]&#x3D;&quot;def&quot;;</span><br><span class="line">cars[2]&#x3D;&quot;ghy&quot;;</span><br></pre></td></tr></table></figure>
  或者（condensed array）凝聚阵列<br>  <code>var cars=new Array(&quot;abc&quot;,&quot;def&quot;,&quot;ghy&quot;);</code><br>  或者（literal array）文字数组<br>  <code>var cars=[&quot;abc&quot;,&quot;def&quot;,&quot;ghy&quot;];</code><br>  数组下表是从零开始，所以第一个项目是cars[0]</li>
<li><strong>Javascript对象</strong><br>  对象由花括号分隔，在括号内部，对象的属性以名称和值成对的形式 <strong>（name:value）</strong>来定义。属性由逗号分隔<br>  <code>var person={fristname:&quot;Mark&quot;,lastnaame:&quot;Doe&quot;,id:5566};</code><br>  上面例子中的对象(person)有三个属性:firstname、lastname、id<br>  空格和折行无关紧要声明可横跨多行  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;&#123;</span><br><span class="line">    firstname:&quot;Mark&quot;,</span><br><span class="line">    lastname:&quot;Doe&quot;,</span><br><span class="line">    id:5566</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  对象属性有两种寻址方式<br>  <code>name=person.lastname;</code><br>  <code>name=person[&quot;lastname&quot;];</code></li>
<li><strong>undefined 和 null</strong><br>  undefined这个值表示变量不含值<br>  可以通过将变量的值设置为null来清空变量<br>  <code>cars=null;</code><br>  <code>person=null;</code></li>
<li><strong>声明变量类型</strong><br>  声明心变量时，可以使用关键字<strong>new</strong>来声明类型<br>  <code>var carname=new string;</code><br>  <code>var x=new Number;</code><br>  <code>var Y=new Boolean;</code><br>  <code>var cars=new Array;</code><br>  <code>var person=new Object;</code><br>  JavaScript变量均为对象，当声明一个变量时，就创建了一个新的对象。</li>
<li><strong>JavaScript运算符</strong><br>  运算符<strong>“=”</strong>用于赋值<br>  运算符<strong>“+”</strong>用于加值<br>  运算符<strong>“=”</strong>用于给Javascript变量赋值<br>  算术运算符<strong>“+”</strong>用于把值加起来  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y&#x3D;5;</span><br><span class="line">z&#x3D;2;</span><br><span class="line">x&#x3D;y+z;  x&#x3D;7</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript算术运算符</strong>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y&#x3D;5;</span><br><span class="line">&quot;+&quot;加法 x&#x3D;y+2 x&#x3D;7 y&#x3D;5   &quot;%&quot;取模（余数）  x%y&#x3D;5</span><br><span class="line">&quot;-&quot;减法 x&#x3D;y-2 x&#x3D;3 y&#x3D;5   &quot;++&quot;自增        x&#x3D;++y   x&#x3D;6 y&#x3D;6</span><br><span class="line">                                       x&#x3D;y++   x&#x3D;5 y&#x3D;6</span><br><span class="line">&quot;*&quot;乘法 x&#x3D;y*2 x&#x3D;3 y&#x3D;5   &quot;--&quot;自减        x&#x3D;--y   x&#x3D;4 y&#x3D;4</span><br><span class="line">                                       x&#x3D;y--   x&#x3D;5 y&#x3D;4</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript赋值运算符</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;10,y&#x3D;5;</span><br><span class="line">&quot;&#x3D;&quot;     x&#x3D;y     x&#x3D;5                 &quot;*&#x3D;&quot;    x*&#x3D;y    x&#x3D;x*y   x&#x3D;50</span><br><span class="line">&quot;+&#x3D;&quot;    x+&#x3D;y    x&#x3D;x+y   x&#x3D;15        &quot;&#x2F;&#x3D;&quot;    x&#x2F;&#x3D;y    x&#x3D;x&#x2F;y   x&#x3D;2</span><br><span class="line">&quot;-&#x3D;&quot;    x-&#x3D;y    x&#x3D;x-y   x&#x3D;5         &quot;%&#x3D;&quot;    x%&#x3D;y    x&#x3D;x%y   x&#x3D;0</span><br></pre></td></tr></table></figure>
 用于字符串的”+”运算符<br> “+”运算符用于把文本值或字符变量加起来（连接起来）<br> 如需把两个或对各字符串连接起来，使用”+”运算符 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;efg&quot;</span><br><span class="line">txt3&#x3D;txt1+txt2; &quot;abcefg&quot;</span><br></pre></td></tr></table></figure>
 要想在两个字符串之间增加空格，需要把空格插入一个字符串之中 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;  efg&quot;;</span><br><span class="line">txt3&#x3D;txt1+txt2; &quot;abc  efg&quot;</span><br></pre></td></tr></table></figure>
 或者把空格插入表达式中 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;efg&quot;</span><br><span class="line">txt3&#x3D;txt1+&quot; &quot;+txt2  &quot;abc efg&quot;</span><br></pre></td></tr></table></figure>
 对字符串和数字进行甲方运算<br> 两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;5+5;          x&#x3D;10</span><br><span class="line">y&#x3D;&quot;5&quot;+5;        x&#x3D;&quot;55&quot;</span><br><span class="line">z&#x3D;&quot;hello&quot;+5;    x&#x3D;&quot;hello5&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript比较和逻辑运算符</strong><br>比较和逻辑运算符用于测试true或者false<br>比较运算符<br>比较运算符符合逻辑语句中使用，以侧变量或者值是否相等<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;5</span><br><span class="line">“&#x3D;&#x3D;”   等于     x&#x3D;&#x3D;8    flase      &quot;&#x3D;&#x3D;&#x3D;&quot; 绝对等于   x&#x3D;&#x3D;&#x3D;&quot;5&quot;  false   </span><br><span class="line">                x&#x3D;&#x3D;5    true                       x&#x3D;&#x3D;&#x3D;5    true</span><br><span class="line">&quot;!&#x3D;&quot; 不等于     x!&#x3D;8     true      &quot;!&#x3D;&#x3D;&quot;不绝对等于 x!&#x3D;&#x3D;&quot;5&quot;    true</span><br><span class="line">                                                  x!&#x3D;&#x3D;5       false</span><br><span class="line">&quot;&gt;&quot; 大于    x&gt;8    false             &quot;&gt;&#x3D;&quot;   大于或等于   x&gt;&#x3D;8  false</span><br><span class="line">&quot;&lt;&quot; 小于    x&lt;8    true              &quot;&lt;&#x3D;&quot;   小于或等于   x&lt;&#x3D;8  true</span><br></pre></td></tr></table></figure>
如何运用<br>可以在条件语句中适应比较运算符对值进行比较，荣获根据结果来采取行动<br><code>if（age&lt;18）   x=&quot;abcx&quot;;</code><br>逻辑运算符<br>逻辑运算符用于测定变量或值之间的逻辑<br><code>x=6,y=3;</code><br>运算符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;&amp;  and (x&lt;10&amp;&amp;y&gt;1)为true</span><br><span class="line">||  or  (x&#x3D;&#x3D;5||y&#x3D;&#x3D;5)为false</span><br><span class="line">！  not !(x&#x3D;&#x3D;y)为true</span><br></pre></td></tr></table></figure>
条件运算符<br>JavaScript包含了基于某些条件对变量进行赋值的条件运算符<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name&#x3D;（condition）?value1:value2</span><br><span class="line">var table&#x3D;(age&lt;18&gt;)?&quot;年龄太小&quot;:&quot;年龄以达到&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript注释和变量</title>
    <url>/2020/02/23/JavaScript%E6%B3%A8%E9%87%8A%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        ol li span{
            background-color: #eee;
            color:#555;
        }
    </style>
    <title>Document</title>
<meta name="generator" content="Hexo 4.2.0"></head>
<body>
    <h4>JavaScript注释 可用来说明代码的作用</h4>
    <ol>
        <li>单行注释：<span>//开头</span><br></li>
        <li>多行注释：<span>/*开头 */结尾</span><br></li>
        <a id="more"></a>
        <li>Html注释:<span>"<！--开头 -->"结尾</！--开头></span><br></li>
        <li>在无法判断浏览器是否支持或可使用Javascript脚本可使用<span>"<！-- javascript注释-->"</！--></span>注释，如果支持JavaScript脚本可以用<span>"<！-- -->"</！--></span>把hmtl注解注释掉<br></li>
        <li>JavaScript注释 可用来说明代码的作用<br></li>
    </ol>
    <h4>JavaScript变量</h4>
    <ol>
        <li>变量必须以字母开头</li>
        <li>变量也能以<span>$</span>和<span>_</span>符号开头</li>
        <li>变量名称对大小写敏感(大写字母Y和小写字母y是不同的变量)</li>
        <li>
            JavaScript变量还能保存其他的数据类型，比如文本值(name="Bill Gates")。<br>
            JavaScript中类似"Bill Gates"这样一条文本被称为字符串
        </li>
        <li>
            JavaScript变量有很多中类型 分别为值类型和引用数据类型<br>
            当向变量分配文本值时，用双引号或单引号包裹这个值<br>
            当向变量的值时数值时，不要使用引号。如果用引号包裹数值时，该值会被作为文本处理<br>
        </li>
        <li>
            声明(创建)Javascript变量<br>
            在Javascript中创建变量通常称为"声明”变量<br>
            使用var关键字来声明变量<br>
            <span>var carname;</span><br>
            变量声明之后，该变量是空的（它没有值）value undefind
            如需向变量赋值，使用等号<br>
            <span>carname="Volov"</span><br>
            也可以在声明变量时对其赋值<br>
            <span>var carname=“Volvo”</span><br>
            一条语句，多个变量<br>
            一条语句中声明很多变量，该语句以var开头并使用逗号分隔变量即可<br>
            <span>var lastname="Dos",age=30,job="carpenter"</span><br>
            声明也可横跨多行<br>
            <span>var lastname="Doe",<br>age=30,<br>job="carpenter";<br></span>
            一条语句中的声明的多个不可以赋同一个值: <br>
            <span>var x,y,z=1; -->x,y为undefined（未赋值）,z为1</span>
            重新声明Javascript变量<br>
            如果重新声明JavaScript变量，该变量的值不会丢失<br>
            <span>var carname="Volvo";<br>var carname;</span>
        </li>
    </ol>
</body>
</html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript保留字</title>
    <url>/2020/02/22/JavaScript%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript保留字</title>
    <script>
        window.onload=function(){
            var Otable=document.getElementById('Reserved');
            console.log(Otable);
            var Areserved=[
                          'abstract','else','instanceof' ,'super', 'boolean', 'enum' ,'int', 'switch', 'break', 'export',
                          'interface', 'synchronized', 'byte', 'extends' ,'let' ,'this' ,'case' ,'false' ,'long',
                          'throw' ,'catch' ,'final' ,'native', 'trows', 'char', 'finally', 'new', 'transient', 'class',
                          'float' ,'null','true' ,'const' ,'for' ,'package', 'try', 'continue' ,'function', 'private',
                          'typeof' ,'debugger' ,'goto','proteced' ,'var', 'default', 'if', 'public', 'void' ,'delete' ,
                          'implements', 'return', 'volatile', 'do' ,'import', 'short' ,'while', 'double', 'in', 'static', 'with'
                          ]
            var otr=document.createElement("tr");
                Otable.appendChild(otr)
            var j=1;
            for(i=0;i<Areserved.length;i++,j++){
                var otd=document.createElement("td");
                    otr.appendChild(otd);
                    otd.innerHTML=Areserved[i];
                    if(j%4==0){
                        otr=document.createElement("tr");
                        Otable.appendChild(otr);
                        j=0;
                    }
            }
        }
    </script>
<meta name="generator" content="Hexo 4.2.0"></head>
<body>
    <table border="1">
        <tbody id="Reserved">
            <tr></tr>
             <a id="more"></a>
        </tbody>
    </table>
    <b>break:用于跳出循环</b><br>
    <b>catch:语句块在try语句执行错误时执行catch语句块</b><br>
    <b>continue:跳过循环中的一个迭代</b><br>
    <b>do...while:执行一个语句块,在条件语句为true时继续执行该语句块</b><br>
    <b>for:在条件语句为true时可以将代码执行指定的次数</b><br>
    <b>for...in:用于遍历数组或对象的属性(对数组或对象的属性觉醒循环操作)</b><br>
    <b>function:定义一个函数</b><br>
    <b>if...else:用于基于不同的条件来执行不同的动作</b><br>
    <b>return:退出函数</b><br>
    <b>switch:用于基于不同的条件来执行不同的动作</b><br>
    <b>throw:抛出（生成）错误</b><br>
    <b>try:实现错误处理，与catch一同使用</b><br>
    <b>var:声明一个变量</b><br>
    <b>while:当条件语句为true时，执行语句块</b><br>
    <b>文本字符中使用反斜杠对代码进行换行</b><br>
    <b>JavaScript是脚本说。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译</b><br>
</body>
</html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>使用hexo+github+node搭建自己的个人博客</title>
    <url>/2020/02/18/hexo%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="个人博客的搭建"><a href="#个人博客的搭建" class="headerlink" title="个人博客的搭建"></a>个人博客的搭建</h1><ul>
<li><strong>安装Node.js</strong><br><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js中文连接</a><br>安装Node.js完成后，打开电脑的命令提示符，进入方法win+r输入cmd进入，进入以后可以输入<br><code>node -v</code> 查看安装Node.js的版本<br><code>npm -v</code> 查看包管理器的版本<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code> 安装淘宝镜像<br>输入 <code>cnpm</code> 查看淘宝镜像是否安装成功<br><code>cnpm -v</code> 查看淘宝镜像版本<a id="more"></a></li>
<li><strong>安装 Hexo 之前需要先安装 Git</strong><br><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Gif官网连接</a><br>Git的目的，一是为了下载从Github下载 hexo 的一些工具资源，二是其提供了Git Bash shell 工具，我们的Hexo配置操作都需要用到。<br><strong>安装完成后，还有记得要配置Git本地的邮箱和用户名，如不配置，后面的操作可能会出现问题。</strong></li>
<li><strong>hexo博客模板的搭建</strong><br><code>cnpm install -g hexo-cli</code> 全局安装hexo博客文档<br><strong>npm 命令时可能会提示warning,只要不是error，一般来说不用管它。</strong><br>新建一个文档存放博客文档<br><code>hexo init</code> 初始化一个博客 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">速度可能会很慢，请耐心等待，若是在这步出现以下错误 :</span><br><span class="line">error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: protocol error: bad pack header</span><br><span class="line">WARN git clone failed. Copying data instead</span><br><span class="line">WARN Failed to install dependencies. Please run &#39;npm install&#39; manually!</span><br><span class="line">或是一直卡住不动，我们在 cmd 中按 Ctrl+C 取消下载，然后删除文件夹中所有文件，重新执行上面的 hexo init 命令</span><br></pre></td></tr></table></figure>
<code>hexo -s</code> 验证hexo是否安装成功<br><img src="/images/cg.jpg" alt><br>安装成功末尾会出现 Strat blogging with Hexo<br><code>hexo s</code>启动hexo<br>这样，Hexo会默认运行在你本机的4000端口上，然后我们在浏览器中输入<code>http://localhost:4000</code>就可以看到初始化的hexo页面了。<ul>
<li><strong>部署到GitHub</strong><br>安装部署<br>npm install hexo-deployer-git –save<br>1、初始化本地仓库：<br><code>git init</code><br>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。<br><code>git remote add origin https://github.com/sweetheartly/sweetheartly.github.io.git</code><br>3、发布hexo到github page。清空、刷新、部署三个命令，可以一起执行。如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript使用误区</title>
    <url>/2020/03/02/JavaScript%E4%BD%BF%E7%94%A8%E8%AF%AF%E5%8C%BA/</url>
    <content><![CDATA[<p><strong>赋值运算符引用错误</strong><br>在JavaScript程序中如果在if条件语句中使用赋值运算符的等号(=)将会产生一个错误结果，正确的方法是使用比较运算符的两个等号(==)<br>if条件语句返回false因为x不等于6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;6);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>if条件语句返回true，因为条件语句执行为x赋值为6，6为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;6);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>if条件语句返回false因为条件执行为x赋值为0，0为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;0;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;0);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>比较运算符常见错误</strong><br>在常规的比较中，数据类型是被忽略的额，以下if条件语句返回true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                var y&#x3D;&quot;6&quot;;             </span><br><span class="line">                document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;y);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>在严格的比较运算符，===为恒等于计算符，调试检查表达式的值与类型，以下if条件语句返回false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                var y&#x3D;&quot;6&quot;;</span><br><span class="line">             document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Boolean(x&#x3D;&#x3D;&#x3D;y);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>这种错误经常会出现在switch语句中，switch语句会使用恒等计算符(===)进行比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                switch(x)&#123;</span><br><span class="line">                    case 6:alert(&quot;666&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">结果会弹出666</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">                switch(x)&#123;</span><br><span class="line">                    case &quot;6&quot;:alert(&quot;666&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">结果不会弹出666</span><br></pre></td></tr></table></figure>
<p><strong>加法与连接注意事项</strong><br>加法是两个数字相加<br>连接是两个字符串连接<br>JavaScript的加法和连接都使用+运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10+5;     x的结果为15</span><br><span class="line">var x&#x3D;10+&quot;5&quot;;   x的结果为&quot;105&quot;</span><br></pre></td></tr></table></figure>
<p>使用变量相加结果也不一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10;</span><br><span class="line">var y&#x3D;5;</span><br><span class="line">var z&#x3D;x+y;      z的结果为15</span><br><span class="line"></span><br><span class="line">var x&#x3D;10;</span><br><span class="line">var y&#x3D;&quot;5&quot;;</span><br><span class="line">var z&#x3D;x+y       z的结果为105</span><br></pre></td></tr></table></figure>
<p><strong>浮点型数据使用注意事项</strong><br>JavaScript中的谁有数据都是以64位浮点型(float)来储存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;0.1;</span><br><span class="line">var y&#x3D;0.2;</span><br><span class="line">var z&#x3D;x+y;          z的结果为0.30000000000000004</span><br><span class="line">if(z&#x3D;&#x3D;0.3)          返回false</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，可以用整数的乘除法来解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var z&#x3D;(x*10+y*10)&#x2F;10    z的结果为0.3</span><br></pre></td></tr></table></figure>
<p><strong>JavaScript字符串分行</strong><br>JavaScript允许我们在字符串中使用断行语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;</span><br><span class="line">&quot;666&quot;;</span><br></pre></td></tr></table></figure>
<p>但是，字符串中直接使用回车换行是会报错的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;&quot;66</span><br><span class="line">666&quot;;</span><br></pre></td></tr></table></figure>
<p>字符串换行需要使用反斜杠()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;&quot;66\</span><br><span class="line">666&quot;;</span><br></pre></td></tr></table></figure>
<p><strong>错误的使用分号</strong><br>以下例子中，if语句失去方法体，原if语句的方法体作为独立的代码块被执行，导致错误的输出结果<br>由于分号的使用错误，if语句中的代码块就一定会执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">                var x&#x3D;6;</span><br><span class="line">               if(x&#x3D;&#x3D;10);&#123;</span><br><span class="line">                   document.getElementById(&quot;demo&quot;).innerHTML&#x3D;&quot;6666&quot;;</span><br><span class="line">               &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>return语句使用注意事项</strong><br>JavaScript默认是在代码最后一行自动结束<br>有分号的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var power&#x3D;10;</span><br><span class="line">    return a*power;</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br></pre></td></tr></table></figure>
<p>无分号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var power&#x3D;10</span><br><span class="line">    return a*power</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br></pre></td></tr></table></figure>
<p>JavaScript也可以使用多行来结束一个语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfuncion(a)&#123;</span><br><span class="line">    var </span><br><span class="line">    power&#x3D;10;</span><br><span class="line">    return a*power</span><br><span class="line">&#125;</span><br><span class="line">结果为550</span><br><span class="line">&#96;&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>function myfuncion(a){<br>    var<br>    power=10;<br>    return  由于 return 是一个完整的语句，所以 JavaScript 将关闭 return 语句。<br>    a*power;<br>}<br>结果为undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**数组中使用名字来索引**</span><br><span class="line">JavaScript不支持使用名字来索引数组,只允许使用数字索引</span><br></pre></td></tr></table></figure>
<p>var person=[];<br>person[0]=”name”;<br>person[1]=”lastname”;<br>person[2]=”46”;<br>var x=person.length;        person.length返回3<br>var y=person[0];            person[0]返回”name”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在JavaScript中，对象使用名字作为索引</span><br><span class="line">如果使用名字作为索引，当访问数组时，JavaScript会把数组重新定义为标准对象</span><br><span class="line">执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误</span><br></pre></td></tr></table></figure>
<p>var person=[];<br>person[“firstName”]=”long”;<br>person[“lastName”]=”Doe”;<br>person[“age”]=46;<br>var x=person.length;    person.length返回0<br>var y=person[0];        person[0]返回undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**定义数组元素，最后不能添加逗号**</span><br><span class="line">数组最后一个值的后面添加逗号虽然与语法没有问题,但是在不同的浏览器可能得到不同的结果</span><br></pre></td></tr></table></figure>
<p>var color=[5,6,7,];     这样数组的长度可能为3，也可能为4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确的定义方式</span><br></pre></td></tr></table></figure>
<p>var color=[5,6,7];</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**定义对象，最后不能添加逗号**</span><br><span class="line">错误定义方式</span><br></pre></td></tr></table></figure>
<p>color={name:”long”,age:118,}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确定义方式</span><br></pre></td></tr></table></figure>
<p>color={name:”long”,age:118}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Undefined不是Null**</span><br><span class="line">在JavaScript中，null用于对象，undefined用于变量、属性和方法</span><br><span class="line">对象只有被定义才有可能为null，否则为undefined</span><br><span class="line">如果想要测试对象是否存在，在对象还未定义时佳能会抛出一个错误</span><br><span class="line">错误的使用方法</span><br></pre></td></tr></table></figure>
<pre><code>if(color!==null&amp;&amp;typeof color!==&quot;undefined&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正确的使用方法需要先使用typeof来检测对象是否已经定义了</span><br></pre></td></tr></table></figure>
<pre><code>if(typeof color!==&quot;undefined&apos;&amp;&amp;color!==null)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序块作用域</span><br><span class="line">在每个代码块中JavaScript不会创建一个新的作用域，一般各个代码块的作用域都是全局的</span><br></pre></td></tr></table></figure>
<script>
for(var i=0;i<10;i++){}
console.log(i);
</script>
<p>````</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript严格模式</title>
    <url>/2020/03/01/JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>JavaScript严格模式(strict mode)即在严格的条件下运行<br><strong>使用”use strict指令”</strong><br>“use strict”指令在JavaScript1.8.5（ECMAScript5）中新增<br>它不少一条语句，但是是一个字面量表达式，在JavaScript旧版本会被忽略<br>“use strict”的目的是指定代码在严格条件下执行<br>使用严格模式为了消除JavaScript语法的一些不合理、不严谨之处、减少一些怪异行为，消除代码运行的一些不安全之处，保证代码的运行安全，提高编译器效率，增加运行速度，为JavaScript新版本做铺垫。<br>严格模式的限制<br>不允许使用未声明的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&quot;use strict&quot;</span><br><span class="line">x&#x3D;3.14       报错(x未定义</span><br><span class="line">)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">进入浏览器的开发者模式可以发现出现“Uncaught ReferenceError: x is not defined”这个错误说明严格模式下不能使用未声明的变量</span><br></pre></td></tr></table></figure>
<p>在函数内部声明是局部作用域(旨在函数内使用严格模式)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">x&#x3D;3;    不报错</span><br><span class="line">myFunction()</span><br><span class="line">function myFunction()&#123;</span><br><span class="line"> &quot;use strict&quot;;</span><br><span class="line">  y&#x3D;3;   报错y未定义</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对象也是一个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  x&#x3D;&#123;z:10,y:20&#125; 报错（x未定义）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除变量或对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  var x&#x3D;123;</span><br><span class="line">  delete x;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  function x(name,lastname)&#123;&#125;; </span><br><span class="line">  delete x;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许变量重名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  function x(y,y)&#123;&#125;; 报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用八进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var x&#x3D;010;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用转义字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var x&#x3D;\010;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许对只读属性赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var obj&#x3D;&#123;&#125;;</span><br><span class="line">  Object.defineProperty(obj,&quot;x&quot;.&#123;value,writable:false&#125;);</span><br><span class="line">  obj.x&#x3D;3;    报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许对一个使用getter方法读取的属性进行赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var obj&#x3D;&#123;getx()&#123;return 0&#125;&#125;;</span><br><span class="line">  obj.x&#x3D;3     报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许删除一个不允许伤处的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  delete Object.prototype;  报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>变量名不能使用”eval”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  var eval&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>变量名不能使用”argument”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">   var argument&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>不允许使用以下语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  with(Math)&#123;x&#x3D;cos(2)&#125;;  报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>由于一些安全原因,在作用域eval()创建的变量不能被调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  eval(&quot;var x&#x3D;2&quot;);</span><br><span class="line">  alet(x);   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>禁止this关键字指向全局对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function f()&#125;&#123;</span><br><span class="line">  return  !this;   返回false，因为“this”指向全局对象，“！this”就是false</span><br><span class="line">&#125;</span><br><span class="line">function f()&#123;</span><br><span class="line">   &quot;use strict&quot;;</span><br><span class="line">   return !this;    返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function  f()&#123;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">  this.a&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">f();  报错，this未定义</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>保留关键字</strong><br>为了向将来JavaScript的新版本过度，严格模式新增了一些保留关键字</p>
<ul>
<li>implement</li>
<li>interface</li>
<li>let</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>static</li>
<li>yield<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &quot;use strict&quot;;</span><br><span class="line">   var public&#x3D;3;   报错</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>“use strict” 指令只允许出现在脚本或函数的开头。</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript变量提升</title>
    <url>/2020/03/01/Javascript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>JavaScript中，函数及变量的声明都将被提升到函数的最顶部<br>JavaScript中，变量可以在使用后声明，也就是变量可以先使用声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 例1:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            x&#x3D;5;    变量设置为5</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);  查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x;   在元素中显示x</span><br><span class="line">            var x;      声明x</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果5</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例2</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x;      声明x</span><br><span class="line">            x&#x3D;5;    变量设置为5</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);  查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x;   在元素中显示x</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果5</span><br></pre></td></tr></table></figure>
<p>变量提升:函数声明和变量声明注释会被解释器悄悄地”提升”到方法地最顶部<br><strong>Javascript初始化不会提升</strong><br>JavaScript只有声明地变量会提升，初始化地不会</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例1:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;8;    初始化x</span><br><span class="line">            var y&#x3D;9;    初始化y</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);       查找元素</span><br><span class="line">            elem.innerHTML&#x3D;x+&quot; &quot;+y;                     显示x和y</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"> 运行结果8 9</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例2</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var x&#x3D;8;    初始化x</span><br><span class="line">            elem&#x3D;document.getElementById(&quot;demo&quot;);查找元素</span><br><span class="line">            elem.innerHTML&#x3D;&quot;x&#x3D;&quot;+x+&quot; &quot;+&quot;y&#x3D;&quot;+y;    显示x和y</span><br><span class="line">            var y&#x3D;9;    初始化y</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">运行结果x&#x3D;8 y&#x3D;undefined</span><br></pre></td></tr></table></figure>
<p>例2中的y输出为undefined，这是因为变量声明（var y）提升了，但是初始化（y=7）并不会提升，所以变量y是一个未定义变量<br><strong>在头部声明变量</strong><br>为避免因为变量提升而出现的问题，通常在每个作用域开始之前声明变量，这也是JavaScript解析的正常步骤。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript调试</title>
    <url>/2020/02/29/Javascript%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<ul>
<li>console.log()方法<br>如果浏览器支持调试,可以使用console.log()方法在调试窗口上打印Javascript<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;5;</span><br><span class="line">b&#x3D;6;</span><br><span class="line">c&#x3D;b-a;</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure></li>
<li>设置断点<br>在调试窗口中，设置Javascript代码的断点<br>在每个断点上，都会停止执行JavaScript代码，以便于检查JavaScript变量的值<br>检查完毕后，可以重新执行代码</li>
<li>debugger关键字<br>debugger关键字用于停止执行JavaScript，并调用调试函数<br>这个关键字与调试工具中设置断点的效果是一样的<br>如果没有调试可用，debugger语句无法工作<br>开启debugger，代码第三行前停止执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;开启调试工具，在代码执行到第三行前会停止执行。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x &#x3D; 15 * 5;</span><br><span class="line">debugger;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;          75 </span><br><span class="line">&lt;&#x2F;script&gt;                                               开启调试工具，在代码执行到第三行前会停止执行。</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 错误 - throw、try 和 catch</title>
    <url>/2020/02/29/JavaScript%20%E9%94%99%E8%AF%AF%20-%20throw%E3%80%81try%20%E5%92%8C%20catch/</url>
    <content><![CDATA[<p>try     语句测试代码块的错误<br>catch   语句处理错误<br>throw   语句创建自定义错误<br>finally 语句在try和catch语句之后，无论是否有触发异常，该语句都会执行</p>
<ul>
<li>JavaScript错误<br>当Javascript引擎执行JavaScript代码时，会发生各种错误<br>可能是语法错误，通常是程序编码错误或错别字<br>可能是拼写错误或者语句中缺少的功能(浏览器的不同)<br>可能是由于来自服务器或用户的错误输出而导致的错误<br>还有其他不可预知的因素</li>
<li>JavaScript抛出（throw）错误<br>当错误发生时，当程序出问题时，JavaScript引擎通常会停止，并生成一个错误消息<br>对于这种情况的技术术语时:JavaScript抛出一个错误</li>
<li>JavaScript try和catch<br>try语句允许我们定义哎执行时进行错误测试的代码块<br>catch语句允许我们定义当try代码块发生错误时，所执行的代码块<br>JavaScript语句try和catch时成对出现的<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    异常的抛出</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    异常的捕获与处理</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    结束处理</span><br><span class="line">&#125;</span><br><span class="line">如:</span><br><span class="line">var text&#x3D;&quot;&quot;;</span><br><span class="line">function message()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">       adddlert(&quot;welcome guest!&quot;)</span><br><span class="line">    &#125;catch(err)&#123;</span><br><span class="line">        test&#x3D;&quot;有一个错误\n&quot;;</span><br><span class="line">        test+&#x3D;&quot;错误描述&quot;+err.message+&quot;\n&quot;; &#x2F;&#x2F;错误原因没有finally</span><br><span class="line">        test+&#x3D;&quot;点击确定继续\n&quot;;</span><br><span class="line">        alert(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>finally语句<br>finally语句不论之前的tryhecatch中是否产生异常都会执行该代码块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myFunction()&#123;</span><br><span class="line">    var message,x;</span><br><span class="line">    message&#x3D;document.getElementById(&quot;p1&quot;);</span><br><span class="line">    message.innerHTML&#x3D;&quot;&quot;;</span><br><span class="line">    x&#x3D;document.getElementById(&quot;demo&quot;).value;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(x&#x3D;&#x3D;&quot;&quot;)throw&quot;值是空的&quot;;</span><br><span class="line">        if(isNaN(x))throw&quot;值不是一个数字&quot;;</span><br><span class="line">        x&#x3D;Number(x);</span><br><span class="line">        if(x&gt;3)throw&quot;大&quot;;</span><br><span class="line">        if(x&lt;&#x3D;3)throw&quot;小&quot;；</span><br><span class="line">    &#125;</span><br><span class="line">    catch(err)&#123;</span><br><span class="line">        message.innerHTML&#x3D;&quot;错误:&quot;+err+&quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    finally&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).value&#x3D;&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Throw语句<br>throw语句允许我们创建自定义错误<br>正确的技术术语是:创建或抛出异常（exception）<br>如果把throw与try和catch一起使用，能够控制程序流，并生成自定义的错误消息<br>throw exception <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myFunction()&#123;</span><br><span class="line">    var message,x;</span><br><span class="line">    message&#x3D;document.getElementById(&quot;p1&quot;);</span><br><span class="line">    message.innerHTML&#x3D;&quot;&quot;;</span><br><span class="line">    x&#x3D;document.getElementById(&quot;demo&quot;).value;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(x&#x3D;&#x3D;&quot;&quot;)throw&quot;值是空的&quot;;</span><br><span class="line">        if(isNaN(x))throw&quot;值不是一个数字&quot;;</span><br><span class="line">        x&#x3D;Number(x);</span><br><span class="line">        if(x&gt;3)throw&quot;大&quot;;</span><br><span class="line">        if(x&lt;&#x3D;3)throw&quot;小&quot;；</span><br><span class="line">    &#125;</span><br><span class="line">    catch(err)&#123;</span><br><span class="line">        message.innerHTML&#x3D;&quot;错误:&quot;+err+&quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    finally&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).value&#x3D;&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript正则表达式</title>
    <url>/2020/02/28/Javascript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/</url>
    <content><![CDATA[<ul>
<li>正则表达式<br>正则表达式是由一个字符序列形成的搜索模式<br>在文本中搜索数据时，可以用搜索模式来描述要查询的内容<br>正则表达式可以是一个简单的字符，或者一个更复杂的模式<br>正则表达式可用于所有文本搜索和文本替换的操作</li>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br><span class="line">例子: var patt&#x3D;&#x2F;runoob&#x2F;i</span><br><span class="line">&#x2F;runoob&#x2F;    是一个正则表达式</span><br><span class="line">runoob      是一个正则表达式主体(用于搜索)</span><br><span class="line">i           是一个修饰符(搜索不区分大小写)</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>使用字符串方法<br>在JavaScript中，正则表达式通常用于两个字符串方法:search()和replace()<br>search方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子字符串的起始位置<br>replace()方法用于字符串中用有些字符替换另一些字符，或替换一个正则表达式匹配的子字符串</li>
<li>search()方法使用正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用正则表达式搜索&quot;Runoob&quot;字符串,且不区分大小写</span><br><span class="line">var str&#x3D;&quot;Runnob abc&quot;</span><br><span class="line">var n&#x3D;str.search(&#x2F;Runoob&#x2F;i);    结果为1</span><br></pre></td></tr></table></figure></li>
<li>search()方法使用字符串<br>serach方法可使用字符串作为参数,字符串参数会转换为正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;Runoob abc&quot;;</span><br><span class="line">var n&#x3D;str.search(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure></li>
<li>replace()方法使用正则表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用正则表达式且不区分大小写将字符串中的abc替换成efg</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;abc123&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.getElementById(&quot;demo&quot;).innerHTML;</span><br><span class="line">var txt&#x3D;a.replace(&#x2F;abc&#x2F;i,&quot;efg&quot;);</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML;&#x3D;txt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>replace()方法使用字符串<br>replace()方法将接收字符串作为参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;abc123&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.getElementById(&quot;demo&quot;).innerHTML;</span><br><span class="line">var txt&#x3D;a.replace(&quot;abc&quot;,&quot;efg&quot;);</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML;&#x3D;txt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>正则表达式修饰符<br>修饰符可以在全局搜索中不区分大小写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i               执行对大小写不敏感的匹配</span><br><span class="line">g               执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</span><br><span class="line">m               执行多行匹配</span><br></pre></td></tr></table></figure></li>
<li>正则表达式模式<br>方括号用于查找某个范围内的字符:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[abc]       查找方括号之间的任何字符</span><br><span class="line">[0-9]       查找如何从0至9的数字</span><br><span class="line">(x|y)       查找任何人以|分隔的选项</span><br></pre></td></tr></table></figure>
元字符是拥有特殊含义的字符:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d          查到数字</span><br><span class="line">\s          查找空白字符</span><br><span class="line">\b          匹配单词边界</span><br><span class="line">\uxxxx      查找以十六进制数xxx规定的Unicode字符</span><br></pre></td></tr></table></figure>
量词<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n+          匹配如何包含至少一个n的字符串</span><br><span class="line">n*          匹配如何包含零个或多个n的字符串</span><br><span class="line">n？         匹配如何包含零个或一个n的字符串</span><br></pre></td></tr></table></figure></li>
<li>使用RegExp对象<br>在Javascript中，RegExp对象是一个预定义了属性和方法的正则表达式对象<br>使用test()<br>test()方法是一个正则表达式的方法<br>test()方法用于检测一个字符串是否匹配某个模式，如果字符串中含有的匹配的文本，则返回true，否则返回false<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var patt&#x3D;&#x2F;e&#x2F;;</span><br><span class="line">patt.test(&quot;abcdefg&quot;)    返回值true</span><br><span class="line">&#x2F;e&#x2F;.test(&quot;abcdefg&quot;);</span><br></pre></td></tr></table></figure>
使用exec()<br>exec()方法是一个正则表达式的方法<br>exec()方法用于检索字符串中的正则表达式的匹配<br>该函数返回一个数组，其中存放匹配的结果，如果未找到匹配，则返回值为null.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e&#x2F;.exec(abcdefg);      输出为e</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript类型转换</title>
    <url>/2020/02/27/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p><strong>Number（）转换为数字，String()转换为字符串，Boolean转换为布尔值</strong><br><strong>JavaScript数据类型</strong><br>    5种数据类型</p>
<ul>
<li>string  </li>
<li>number </li>
<li>boolean </li>
<li>object </li>
<li>function <a id="more"></a>
 3种对象类型</li>
<li>Object</li>
<li>Date</li>
<li>Array<br> 2个不包含任何值的数据类型</li>
<li>null</li>
<li>undefined</li>
<li>可以使用tyof操作符查看JavaScript变量的数据类型 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot; 返回 string</span><br><span class="line">typeof  3.14  返回 number</span><br><span class="line">typeof  false 返回 boolean</span><br><span class="line">typeof [1,2,3]返回 object</span><br><span class="line">typeof &#123;age:3&#125;返回 object</span><br><span class="line">typeof new Date()返回object</span><br><span class="line">typeof function()&#123;&#125;返回function</span><br><span class="line">typeof mycar  返回undefined</span><br><span class="line">typeof null   返回object</span><br></pre></td></tr></table></figure>
 NaN 的数据类型是 number<br> 数组(Array)的数据类型是 object<br> 日期(Date)的数据类型为 object<br> null 的数据类型是 object<br> 未定义变量的数据类型为 undefined<br> 如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</li>
<li>可以使用constructor查看JavaScript变量的构造函数 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“John”.constructor          返回函数String()</span><br><span class="line">(3.14).constructor          返回函数Number()</span><br><span class="line">false.constructor           返回函数Boolean()</span><br><span class="line">[name:&#39;abc&#39;].constructor    返回函数Array()</span><br><span class="line">&#123;name:&#39;abc&#39;&#125;.constructor    返回函数Object()</span><br><span class="line">new Date().constructor      返回函数Object()</span><br><span class="line">function()&#123;&#125;.constructor    返回函数function()</span><br></pre></td></tr></table></figure></li>
<li>将数字转换为字符串<br>全局方法String()可以将数字转换为字符串<br>该方法可用于如何类型的数字、字母、变量、表达式；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(x)       将变量x转换为字符串并返回</span><br><span class="line">string(123)     将变量123转换为字符串并返回</span><br><span class="line">string(100+1)   将数字表达式转换为字符串并返回</span><br></pre></td></tr></table></figure>
Number方法tostring()同样也有效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x.tostring()</span><br><span class="line">(123).tostring()</span><br><span class="line">(100+1).tostring()</span><br></pre></td></tr></table></figure>
Number方法还可以使用其他的方法把数字转换为字符串:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toExponential()     把对象的值转换为指数计数法</span><br><span class="line">toFixed()           把数字转换为字符串，结果的小数点后有指定位数的数字</span><br><span class="line">toPrecision()       把数字格式化为指定的长度</span><br></pre></td></tr></table></figure></li>
<li>将布尔值转换为字符串<br>全局方法String()可以把布尔值转换为字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(false)   返回&quot;false&quot;</span><br><span class="line">String(true)    返回&quot;true&quot;</span><br></pre></td></tr></table></figure>
Boolean方法toString()也有相同的效果<br>false.toString()    返回”false”<br>true.toString()     返回”true”</li>
<li>将日期转换为字符串<br>Date()返回字符串<br>Date()              返回当前计算机的时间<br>全局方法String()可以将日期对向转换为字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(new Date())  返回当前计算机的时间</span><br></pre></td></tr></table></figure>
Date方法toString()也有相同的效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj&#x3D;new Date()</span><br><span class="line">obj.toString()      返回当前计算机的时间</span><br></pre></td></tr></table></figure>
在Date方法中还有更多日期转换字符串的函数:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDate()       从Date对象返回一个月中的某一天(1~31)</span><br><span class="line">getDay()        从Date对象返回一周中的某一天(0~6)</span><br><span class="line">getFullYear()   从Date对象以四位数字返回年份</span><br><span class="line">getHours()      返回Date对象的小时(0~23)</span><br><span class="line">getMillisecond()返回Date对象的毫秒(0~999)</span><br><span class="line">getMinutes()    返回Date对象的分钟(0~59)</span><br><span class="line">getMonth()      返回Date对象的月份(0~11)</span><br><span class="line">getSeconds()    返回Date对象的秒数(0~59)</span><br><span class="line">getTime()       返回1970年1月1日至今的毫秒数</span><br></pre></td></tr></table></figure></li>
<li>将字符串转换为数字<br>全局方法Number()可以将字符串转换为数字<br>字符串包含的数字“3.14”转换为数字3.14<br>空字符串转换为0<br>其他字符串会转换为NaN(不是个数字)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number(&quot;3.14&quot;)      返回3.14</span><br><span class="line">Number(&quot; &quot;)         返回0</span><br><span class="line">Number(&quot;&quot;)          返回0</span><br><span class="line">Number(&quot;11  222&quot;)   返回NaN</span><br></pre></td></tr></table></figure>
Number方法，还有其他字符串转为数字的方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat()         解析一个字符串，并返回一个浮点数</span><br><span class="line">parseInt()           解析一个字符串，并返回一个整数</span><br></pre></td></tr></table></figure></li>
<li>一元运算符 +<br>Operator +  可用于将变量转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var y&#x3D;&quot;5&quot;;          y是一个字符串</span><br><span class="line">var x&#x3D;+y;           x是一个数字</span><br></pre></td></tr></table></figure>
如果变量不能转换，它仍然会是一个数字，但值为NaN(不是一个数字)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var y&#x3D;“abc”         y是一个字符串</span><br><span class="line">var x&#x3D;+y;           x是一个数字（NaN）</span><br></pre></td></tr></table></figure></li>
<li>将布尔值转换为数字<br>全局方法Number()可将布尔值转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number(false)       返回0</span><br><span class="line">Number(true)        返回1</span><br></pre></td></tr></table></figure></li>
<li>将日期转换为数字<br>全局方法Number()可将日期转换为数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date&#x3D;new Date()</span><br><span class="line">Number(date)        返回1404568027739</span><br></pre></td></tr></table></figure>
日期方法getTime()也有相同的效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date&#x3D;new Date()</span><br><span class="line">date.getTime()       返回1404568027739</span><br></pre></td></tr></table></figure></li>
<li>自动转换类型<br>当JavaScript测试操作一个”错误”的数据类型时，会自动转换为”正确”的数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5+null      返回5       null转换为0</span><br><span class="line">&quot;5&quot;+null    返回&quot;5null&quot; null转换为&quot;null&quot;</span><br><span class="line">&quot;5&quot;+1       返回&quot;51&quot;    1转换为&quot;1&quot;</span><br><span class="line">&quot;5&quot;-1       返回4       &quot;5&quot;转换为5</span><br></pre></td></tr></table></figure></li>
<li>自动转换字符串<br>当尝试输出一个对象或者一个变量时Javascript会自动调用变量的toString()方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHtml&#x3D;myvar;</span><br><span class="line">myVar&#x3D;&#123;&quot;name&quot;:&quot;abc&quot;&#125;    toString转换为&quot;[object  Object]&quot;</span><br><span class="line">myVar&#x3D;[1,2,3]           toString转换为&quot;1,2,3&quot;</span><br><span class="line">myVar&#x3D;new Date()        toString转换为&quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;</span><br></pre></td></tr></table></figure>
数字和布尔值经常相互转换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myVar&#x3D;123       toString转换为&quot;123&quot;</span><br><span class="line">myVar&#x3D;true      toString转换为&quot;true&quot;</span><br><span class="line">myVar&#x3D;false     toString转换为&quot;false&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript typeof null undefind</title>
    <url>/2020/02/27/JavaScript%20typeof%E3%80%81null%E3%80%81undefined/</url>
    <content><![CDATA[<ul>
<li><strong>typeof操作符</strong><br>可以使用typeof操作符来检测变量的数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot; 返回 string</span><br><span class="line">typeof  3.14  返回 number</span><br><span class="line">typeof  false 返回 Boolean</span><br><span class="line">typeof [1,2,3]返回 object</span><br><span class="line">typeof &#123;age:3&#125;返回 object</span><br></pre></td></tr></table></figure>
JavaScript中数组是一种特殊的对象类型<a id="more"></a></li>
<li><strong>null</strong><br>null：主动释放一个变量引用的对象，表示一个变量不再指向如何对象地址<br>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为null<br>在JavaScript中null表示“什么都没有”<br>null是一个只有一个值的特殊类型，表示一个空对象引用<br>用typeof检测null返回是object<br>可以把一个变量设置为null起到清空对象的作用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;null; 值为null（空），但类型为对象</span><br></pre></td></tr></table></figure></li>
<li><strong>undefined</strong><br>undefined：是属于没有赋值变量的默认值，指定赋值<br>在JavaScript中，undefined是一个没有设置值的变量<br>typeof一个没有值的变量会返回undefined<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person 值为undefined，类型为undefined</span><br></pre></td></tr></table></figure>
任何变量都可以通过设置值为undefined来清空，类型为undefined<br>var person=undefined; 值为undefined，类型为undefined</li>
<li><strong>undefined和null区别</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof  undefined undefined     null&#x3D;&#x3D;&#x3D;undefined false</span><br><span class="line">typeof  null      object        null&#x3D;&#x3D;undefinde  true</span><br></pre></td></tr></table></figure>
共同点：都是原始类型，保存在栈中变量本地<br>不同点：<br>（1）undefined表示变量声明过但并未赋值，是属于未赋值变量默认值<br>（2）null表示一个变量将来可能指向一个对象，一般用于主动释放指向对象的引用<br>延伸—垃圾回收站<br>专门释放对象内存的程序<br>（1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收站<br>（2）只有一个对象不再被如何变量引用时，才释放</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript break和continue语句</title>
    <url>/2020/02/27/JavaScript%20breakhecontinue%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<ul>
<li><strong>break语句</strong><br>break语句跳出循环后，会继续执行该循环之后的代码（如果有的话）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">    if(i&#x3D;&#x3D;5)&#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    x&#x3D;x+&quot;this number is&quot;+i+&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><strong>continue语句</strong><br>continue语句中断循环中的迭代，如果出现了指定的条件，然后继续循环下一个迭代<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0;i&lt;&#x3D;10;i++)&#123;</span><br><span class="line">    if(i&#x3D;5)</span><br><span class="line">    continue;</span><br><span class="line">    x&#x3D;x+&quot;The number is &quot;+i+&quot;&lt;br&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript循环语句</title>
    <url>/2020/02/27/JavaScript%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<ul>
<li><strong>JavaScript for 循环</strong><br>循环可以将代码块执行指定的次数<br>如果希望一边又一遍地运行相同的代码，并且每次的值都不同，那么口语使用循环<br>JavaScript支持不同类型的循环：<br>for 循环一定的次数代码块<br>for循环的语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for（语句1；语句2；语句3）</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
语句1（代码块）开始前执行（在循环开始之前设置变量）<br>语句2 定义运行循环（代码块）的条件（定义循环运行的条件）<br>语句3 在循环（代码块）已被执行之后执行（在每次代码块已被执行后增加一个值）<br>语句1是可选的，也就是说不适用语句1也是可以的，可以在语句1中的初始化容易（或者多个）值<br>语句2同样是可选的<br>如果省略语句2，那么必须在循环内特工break否则循环就无法停下（死循环）浏览器可能会崩溃<br>如果语句2返回true，则循环再次开始，如果为false，则循环结束<br>语句3可选的<br>语句3通常是增加初始化变量的值，有多种用法增量可以实分数（i–）或者更大（i=i+15）<br>语句3省略的话要在循环内部增加相应的代码<br>for/in 循环遍历对象的属性<br>for/in循环语句<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#123;name:&#39;abc&#39;,age:18&#125;</span><br><span class="line">for（x in person） x为属性名</span><br><span class="line">&#123;</span><br><span class="line">    text&#x3D;text+person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
定义数组后对数组进行赋值，之间如有某些下标未适应（即未赋值），在遍历的时候，采用一般的for循环和for…in循环得到的结果不同<br>for…in循环会自动跳过那些没被赋值的元素，而for循环则不会，它会显示出undefined<br>while 当指定的条件为true时循环指定的代码块<br>while循环语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果忘记增加条件中所用遍历的值，该循环永远不会结束（死循环），浏览器可能会崩溃<br>do/while 同样指定的退奖为true时循环指定的代码块，该循环会在检查条件是否为真之前先运行一次代码块，如果条件为false停止循环，为true继续运行<br>do/while语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">wile（条件）</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript条件语句</title>
    <url>/2020/02/26/JavaScript%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p><strong>条件语句基于不同的条件来执行不同的动作</strong><br><strong>条件语句</strong><br>在JavaScript中，我们可使用if、if…else、if…else if…else、switch语句<br><strong>if语句，只有指定条件为true时，使用该语句来执行代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition）&#123;</span><br><span class="line">    当条件为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>if…else语句 当条件为true时执行代码，当条件为false时执行其他代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition）&#123;</span><br><span class="line">    当条件为true时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    当条件不为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>if…else if…else语句使用该语句来选择多个代码块之一来执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（condition1）&#123;</span><br><span class="line">    当条件1为true时执行的代码</span><br><span class="line">&#125;else if（condition2）&#123;</span><br><span class="line">    当条件2为true时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">     当条件1和条件2都不为true时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用小写的if 用大写IF会生成JavaScript错误<br><strong>switch语句使用该语句来选择多个代码块之一来执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">            执行代码块1</span><br><span class="line">            break;</span><br><span class="line">    case 2:</span><br><span class="line">            执行代码块2</span><br><span class="line">            break;</span><br><span class="line">    default:</span><br><span class="line">            与case1和case2不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工作原理：首先设置表达式n（通常一个变量）随后表达式的值会与结构中的每个case的值做比较如果存在匹配，则与该case关联的代码块会被执行。使用break来阻止代码自动地向一个case运行。<br>使用default关键字来规定匹配不存在时做的事情</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript数据类型</title>
    <url>/2020/02/24/Javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Javascript数据类型"><a href="#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a>Javascript数据类型</h1><ul>
<li><strong>值类型：字符串（String）、数字（Number）、布尔（Boolean）、对空（Null）、未定义（Undefined）</strong></li>
<li><strong>引用类型：对象（Object）、数组（Array）、函数（Function）</strong></li>
<li><strong>Javascript拥有动态类型</strong><br>  Javascript拥有动态类型意味着系统的变量可用作不同的类型<br>  <code>var x;</code>         x为undefined<br>  <code>var x=5;</code>       x为数字<br>  <code>var x=&quot;John&quot;;</code>  x为字符串</li>
<li><strong>Javascript字符串</strong><br>  字符串是储存字符<code>（比如“Bill Gates”）</code>的变量<br>  字符串引号中可以添加任意文本,可用双引号或单引号<br>  <code>var carname=&quot;Volvo&quot;;</code><br>  <code>var carname=&#39;Volvo&#39;;</code><br>  可以在字符串中使用引号，只要不匹配包围字符春的引号即可<br>  <code>var answer=&quot;It alright&quot;;</code><br>  <code>var answer=&quot;He is called &#39;Johnny&#39;&quot;;</code><br>  <code>var answer=&#39;He is called &quot;Johnny&quot;&#39;;</code>  <a id="more"></a></li>
<li><strong>Javascript数字</strong><br>  JavaScript只用一种数字类型。数字可以带小数点，也可以不带<br>  <code>var x1=4.00;</code>使用小数点来写<br>  <code>var x2=4;</code>不适用小数点来写<br>  <strong>极大或极小的数字可以通过科学（指数）计数法来书写</strong>‘<br>  <code>var x1=123e;</code>12300000<br>  <code>var x2=123e-5;</code>0.00123</li>
<li><strong>Javascript布尔</strong><br>  布尔（逻辑）只有两个值：true或false<br>  <code>var x=true;</code><br>  <code>var y=false;</code><br>  布尔常用在条件测试中</li>
<li><strong>Javascript数组</strong><br>  下面代码创建名为cars的数组  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cars&#x3D;new Array();</span><br><span class="line">cars[0]&#x3D;&quot;abc&quot;;</span><br><span class="line">cars[1]&#x3D;&quot;def&quot;;</span><br><span class="line">cars[2]&#x3D;&quot;ghy&quot;;</span><br></pre></td></tr></table></figure>
  或者（condensed array）凝聚阵列<br>  <code>var cars=new Array(&quot;abc&quot;,&quot;def&quot;,&quot;ghy&quot;);</code><br>  或者（literal array）文字数组<br>  <code>var cars=[&quot;abc&quot;,&quot;def&quot;,&quot;ghy&quot;];</code><br>  数组下表是从零开始，所以第一个项目是cars[0]</li>
<li><strong>Javascript对象</strong><br>  对象由花括号分隔，在括号内部，对象的属性以名称和值成对的形式 <strong>（name:value）</strong>来定义。属性由逗号分隔<br>  <code>var person={fristname:&quot;Mark&quot;,lastnaame:&quot;Doe&quot;,id:5566};</code><br>  上面例子中的对象(person)有三个属性:firstname、lastname、id<br>  空格和折行无关紧要声明可横跨多行  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;&#123;</span><br><span class="line">    firstname:&quot;Mark&quot;,</span><br><span class="line">    lastname:&quot;Doe&quot;,</span><br><span class="line">    id:5566</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  对象属性有两种寻址方式<br>  <code>name=person.lastname;</code><br>  <code>name=person[&quot;lastname&quot;];</code></li>
<li><strong>undefined 和 null</strong><br>  undefined这个值表示变量不含值<br>  可以通过将变量的值设置为null来清空变量<br>  <code>cars=null;</code><br>  <code>person=null;</code></li>
<li><strong>声明变量类型</strong><br>  声明心变量时，可以使用关键字<strong>new</strong>来声明类型<br>  <code>var carname=new string;</code><br>  <code>var x=new Number;</code><br>  <code>var Y=new Boolean;</code><br>  <code>var cars=new Array;</code><br>  <code>var person=new Object;</code><br>  JavaScript变量均为对象，当声明一个变量时，就创建了一个新的对象。</li>
<li><strong>JavaScript运算符</strong><br>  运算符<strong>“=”</strong>用于赋值<br>  运算符<strong>“+”</strong>用于加值<br>  运算符<strong>“=”</strong>用于给Javascript变量赋值<br>  算术运算符<strong>“+”</strong>用于把值加起来  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y&#x3D;5;</span><br><span class="line">z&#x3D;2;</span><br><span class="line">x&#x3D;y+z;  x&#x3D;7</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript算术运算符</strong>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y&#x3D;5;</span><br><span class="line">&quot;+&quot;加法 x&#x3D;y+2 x&#x3D;7 y&#x3D;5   &quot;%&quot;取模（余数）  x%y&#x3D;5</span><br><span class="line">&quot;-&quot;减法 x&#x3D;y-2 x&#x3D;3 y&#x3D;5   &quot;++&quot;自增        x&#x3D;++y   x&#x3D;6 y&#x3D;6</span><br><span class="line">                                       x&#x3D;y++   x&#x3D;5 y&#x3D;6</span><br><span class="line">&quot;*&quot;乘法 x&#x3D;y*2 x&#x3D;3 y&#x3D;5   &quot;--&quot;自减        x&#x3D;--y   x&#x3D;4 y&#x3D;4</span><br><span class="line">                                       x&#x3D;y--   x&#x3D;5 y&#x3D;4</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript赋值运算符</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;10,y&#x3D;5;</span><br><span class="line">&quot;&#x3D;&quot;     x&#x3D;y     x&#x3D;5                 &quot;*&#x3D;&quot;    x*&#x3D;y    x&#x3D;x*y   x&#x3D;50</span><br><span class="line">&quot;+&#x3D;&quot;    x+&#x3D;y    x&#x3D;x+y   x&#x3D;15        &quot;&#x2F;&#x3D;&quot;    x&#x2F;&#x3D;y    x&#x3D;x&#x2F;y   x&#x3D;2</span><br><span class="line">&quot;-&#x3D;&quot;    x-&#x3D;y    x&#x3D;x-y   x&#x3D;5         &quot;%&#x3D;&quot;    x%&#x3D;y    x&#x3D;x%y   x&#x3D;0</span><br></pre></td></tr></table></figure>
 用于字符串的”+”运算符<br> “+”运算符用于把文本值或字符变量加起来（连接起来）<br> 如需把两个或对各字符串连接起来，使用”+”运算符 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;efg&quot;</span><br><span class="line">txt3&#x3D;txt1+txt2; &quot;abcefg&quot;</span><br></pre></td></tr></table></figure>
 要想在两个字符串之间增加空格，需要把空格插入一个字符串之中 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;  efg&quot;;</span><br><span class="line">txt3&#x3D;txt1+txt2; &quot;abc  efg&quot;</span><br></pre></td></tr></table></figure>
 或者把空格插入表达式中 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">txt1&#x3D;&quot;abc&quot;;</span><br><span class="line">txt2&#x3D;&quot;efg&quot;</span><br><span class="line">txt3&#x3D;txt1+&quot; &quot;+txt2  &quot;abc efg&quot;</span><br></pre></td></tr></table></figure>
 对字符串和数字进行甲方运算<br> 两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;5+5;          x&#x3D;10</span><br><span class="line">y&#x3D;&quot;5&quot;+5;        x&#x3D;&quot;55&quot;</span><br><span class="line">z&#x3D;&quot;hello&quot;+5;    x&#x3D;&quot;hello5&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>JavaScript比较和逻辑运算符</strong><br>比较和逻辑运算符用于测试true或者false<br>比较运算符<br>比较运算符符合逻辑语句中使用，以侧变量或者值是否相等<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;5</span><br><span class="line">“&#x3D;&#x3D;”   等于     x&#x3D;&#x3D;8    flase      &quot;&#x3D;&#x3D;&#x3D;&quot; 绝对等于   x&#x3D;&#x3D;&#x3D;&quot;5&quot;  false   </span><br><span class="line">                x&#x3D;&#x3D;5    true                       x&#x3D;&#x3D;&#x3D;5    true</span><br><span class="line">&quot;!&#x3D;&quot; 不等于     x!&#x3D;8     true      &quot;!&#x3D;&#x3D;&quot;不绝对等于 x!&#x3D;&#x3D;&quot;5&quot;    true</span><br><span class="line">                                                  x!&#x3D;&#x3D;5       false</span><br><span class="line">&quot;&gt;&quot; 大于    x&gt;8    false             &quot;&gt;&#x3D;&quot;   大于或等于   x&gt;&#x3D;8  false</span><br><span class="line">&quot;&lt;&quot; 小于    x&lt;8    true              &quot;&lt;&#x3D;&quot;   小于或等于   x&lt;&#x3D;8  true</span><br></pre></td></tr></table></figure>
如何运用<br>可以在条件语句中适应比较运算符对值进行比较，荣获根据结果来采取行动<br><code>if（age&lt;18）   x=&quot;abcx&quot;;</code><br>逻辑运算符<br>逻辑运算符用于测定变量或值之间的逻辑<br><code>x=6,y=3;</code><br>运算符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;&amp;  and (x&lt;10&amp;&amp;y&gt;1)为true</span><br><span class="line">||  or  (x&#x3D;&#x3D;5||y&#x3D;&#x3D;5)为false</span><br><span class="line">！  not !(x&#x3D;&#x3D;y)为true</span><br></pre></td></tr></table></figure>
条件运算符<br>JavaScript包含了基于某些条件对变量进行赋值的条件运算符<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name&#x3D;（condition）?value1:value2</span><br><span class="line">var table&#x3D;(age&lt;18&gt;)?&quot;年龄太小&quot;:&quot;年龄以达到&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript注释和变量</title>
    <url>/2020/02/23/JavaScript%E6%B3%A8%E9%87%8A%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        ol li span{
            background-color: #eee;
            color:#555;
        }
    </style>
    <title>Document</title>
<meta name="generator" content="Hexo 4.2.0"></head>
<body>
    <h4>JavaScript注释 可用来说明代码的作用</h4>
    <ol>
        <li>单行注释：<span>//开头</span><br></li>
        <li>多行注释：<span>/*开头 */结尾</span><br></li>
        <a id="more"></a>
        <li>Html注释:<span>"<！--开头 -->"结尾</！--开头></span><br></li>
        <li>在无法判断浏览器是否支持或可使用Javascript脚本可使用<span>"<！-- javascript注释-->"</！--></span>注释，如果支持JavaScript脚本可以用<span>"<！-- -->"</！--></span>把hmtl注解注释掉<br></li>
        <li>JavaScript注释 可用来说明代码的作用<br></li>
    </ol>
    <h4>JavaScript变量</h4>
    <ol>
        <li>变量必须以字母开头</li>
        <li>变量也能以<span>$</span>和<span>_</span>符号开头</li>
        <li>变量名称对大小写敏感(大写字母Y和小写字母y是不同的变量)</li>
        <li>
            JavaScript变量还能保存其他的数据类型，比如文本值(name="Bill Gates")。<br>
            JavaScript中类似"Bill Gates"这样一条文本被称为字符串
        </li>
        <li>
            JavaScript变量有很多中类型 分别为值类型和引用数据类型<br>
            当向变量分配文本值时，用双引号或单引号包裹这个值<br>
            当向变量的值时数值时，不要使用引号。如果用引号包裹数值时，该值会被作为文本处理<br>
        </li>
        <li>
            声明(创建)Javascript变量<br>
            在Javascript中创建变量通常称为"声明”变量<br>
            使用var关键字来声明变量<br>
            <span>var carname;</span><br>
            变量声明之后，该变量是空的（它没有值）value undefind
            如需向变量赋值，使用等号<br>
            <span>carname="Volov"</span><br>
            也可以在声明变量时对其赋值<br>
            <span>var carname=“Volvo”</span><br>
            一条语句，多个变量<br>
            一条语句中声明很多变量，该语句以var开头并使用逗号分隔变量即可<br>
            <span>var lastname="Dos",age=30,job="carpenter"</span><br>
            声明也可横跨多行<br>
            <span>var lastname="Doe",<br>age=30,<br>job="carpenter";<br></span>
            一条语句中的声明的多个不可以赋同一个值: <br>
            <span>var x,y,z=1; -->x,y为undefined（未赋值）,z为1</span>
            重新声明Javascript变量<br>
            如果重新声明JavaScript变量，该变量的值不会丢失<br>
            <span>var carname="Volvo";<br>var carname;</span>
        </li>
    </ol>
</body>
</html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript保留字</title>
    <url>/2020/02/22/JavaScript%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript保留字</title>
    <script>
        window.onload=function(){
            var Otable=document.getElementById('Reserved');
            var Areserved=[
                          'abstract','else','instanceof' ,'super', 'boolean', 'enum' ,'int', 'switch', 'break', 'export',
                          'interface', 'synchronized', 'byte', 'extends' ,'let' ,'this' ,'case' ,'false' ,'long',
                          'throw' ,'catch' ,'final' ,'native', 'trows', 'char', 'finally', 'new', 'transient', 'class',
                          'float' ,'null','true' ,'const' ,'for' ,'package', 'try', 'continue' ,'function', 'private',
                          'typeof' ,'debugger' ,'goto','proteced' ,'var', 'default', 'if', 'public', 'void' ,'delete' ,
                          'implements', 'return', 'volatile', 'do' ,'import', 'short' ,'while', 'double', 'in', 'static', 'with'
                          ]
            var otr=document.createElement("tr");
                Otable.appendChild(otr)
            var j=1;
            for(i=0;i<Areserved.length;i++,j++){
                var otd=document.createElement("td");
                    otr.appendChild(otd);
                    otd.innerHTML=Areserved[i];
                    if(j%4==0){
                        otr=document.createElement("tr");
                        Otable.appendChild(otr);
                        j=0;
                    }
            }
        }
    </script>
<meta name="generator" content="Hexo 4.2.0"></head>
<body>
    <table border="1">
        <tbody id="Reserved">
            <tr></tr>
             <a id="more"></a>
        </tbody>
    </table>
    <b>break:用于跳出循环</b><br>
    <b>catch:语句块在try语句执行错误时执行catch语句块</b><br>
    <b>continue:跳过循环中的一个迭代</b><br>
    <b>do...while:执行一个语句块,在条件语句为true时继续执行该语句块</b><br>
    <b>for:在条件语句为true时可以将代码执行指定的次数</b><br>
    <b>for...in:用于遍历数组或对象的属性(对数组或对象的属性觉醒循环操作)</b><br>
    <b>function:定义一个函数</b><br>
    <b>if...else:用于基于不同的条件来执行不同的动作</b><br>
    <b>return:退出函数</b><br>
    <b>switch:用于基于不同的条件来执行不同的动作</b><br>
    <b>throw:抛出（生成）错误</b><br>
    <b>try:实现错误处理，与catch一同使用</b><br>
    <b>var:声明一个变量</b><br>
    <b>while:当条件语句为true时，执行语句块</b><br>
    <b>文本字符中使用反斜杠对代码进行换行</b><br>
    <b>JavaScript是脚本说。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译</b><br>
</body>
</html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>使用hexo+github+node搭建自己的个人博客</title>
    <url>/2020/02/18/hexo%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="个人博客的搭建"><a href="#个人博客的搭建" class="headerlink" title="个人博客的搭建"></a>个人博客的搭建</h1><ul>
<li><strong>安装Node.js</strong><br><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js中文连接</a><br>安装Node.js完成后，打开电脑的命令提示符，进入方法win+r输入cmd进入，进入以后可以输入<br><code>node -v</code> 查看安装Node.js的版本<br><code>npm -v</code> 查看包管理器的版本<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code> 安装淘宝镜像<br>输入 <code>cnpm</code> 查看淘宝镜像是否安装成功<br><code>cnpm -v</code> 查看淘宝镜像版本<a id="more"></a></li>
<li><strong>安装 Hexo 之前需要先安装 Git</strong><br><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Gif官网连接</a><br>Git的目的，一是为了下载从Github下载 hexo 的一些工具资源，二是其提供了Git Bash shell 工具，我们的Hexo配置操作都需要用到。<br><strong>安装完成后，还有记得要配置Git本地的邮箱和用户名，如不配置，后面的操作可能会出现问题。</strong></li>
<li><strong>hexo博客模板的搭建</strong><br><code>cnpm install -g hexo-cli</code> 全局安装hexo博客文档<br><strong>npm 命令时可能会提示warning,只要不是error，一般来说不用管它。</strong><br>新建一个文档存放博客文档<br><code>hexo init</code> 初始化一个博客 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">速度可能会很慢，请耐心等待，若是在这步出现以下错误 :</span><br><span class="line">error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: protocol error: bad pack header</span><br><span class="line">WARN git clone failed. Copying data instead</span><br><span class="line">WARN Failed to install dependencies. Please run &#39;npm install&#39; manually!</span><br><span class="line">或是一直卡住不动，我们在 cmd 中按 Ctrl+C 取消下载，然后删除文件夹中所有文件，重新执行上面的 hexo init 命令</span><br></pre></td></tr></table></figure>
<code>hexo -s</code> 验证hexo是否安装成功<br><img src="/images/cg.jpg" alt><br>安装成功末尾会出现 Strat blogging with Hexo<br><code>hexo s</code>启动hexo<br>这样，Hexo会默认运行在你本机的4000端口上，然后我们在浏览器中输入<code>http://localhost:4000</code>就可以看到初始化的hexo页面了。<ul>
<li><strong>部署到GitHub</strong><br>安装部署<br>npm install hexo-deployer-git –save<br>1、初始化本地仓库：<br><code>git init</code><br>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。<br><code>git remote add origin https://github.com/sweetheartly/sweetheartly.github.io.git</code><br>3、发布hexo到github page。清空、刷新、部署三个命令，可以一起执行。如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
